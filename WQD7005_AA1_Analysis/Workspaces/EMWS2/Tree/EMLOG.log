*------------------------------------------------------------*
User:                xavie
Date:                January 07, 2024
Time:                01:49:54
Site:                12601940
Platform:            W32_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                January 07, 2024
Time:                01:49:51
*------------------------------------------------------------*
14715  proc freq data=EMWS2.Tree_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.TreeMETA;
14717  run;
 
NOTE: There were 17 observations read from the data set EMWS2.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
14718  proc print data=WORK.TreeMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 4 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN
>>>>>>>>>>>>>> TARGET(   USE='Y'
                         REPORT='N'
                         NAME='Churn'
                         ROLE='TARGET'
                         LEVEL='NOMINAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='CATEGORY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='C'
                         LABEL=''
                         FORMAT='$5.'
                         INFORMAT='$5.'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=5
                      )[11273]
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
14810  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14811  length ORDER $20;
14812  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14813     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14814  set EMWS2.TREE_CHURN_DM( where=(_TYPE_="TARGET"));
14815  NumLevels=2;
14816  select(upcase(ORDER));
14817  when('DESC') ORDER = 'Descending';
14818  when('ASC') ORDER = 'Ascending';
14819  when('FMTDESC') ORDER = 'Formatted Descending';
14820  when('FMTASC') ORDER = 'Formatted Ascending';
14821  otherwise ORDER = 'Descending';
14822  end;
14823  output;
14824  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_CHURN_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14825  title9 ' ';
14826  proc print data=WORK.Tree_EVENT noobs label;
14827  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14828  title9 ' ';
14829  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14830  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14831  title10;
 
"No decisions defined for target "Churn"."
14832  proc print data = EMWS2.Tree_Churn_DM noobs label;
14833  var _type_ variable label;
14834  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14835  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14836  title9 ' ';
14837  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14838  run;
 
NOTE: There were 7 observations read from the data set EMWS2.TREE_CHURN_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14839  title10;
 
14840  %let EMEXCEPTIONSTRING=;
15340  *------------------------------------------------------------*;
15341  * Tree: Generation of macros and macro variables;
15342  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15343  *------------------------------------------------------------*;
 
15344  %let EMEXCEPTIONSTRING=;
15345  *------------------------------------------------------------*;
15346  * TRAIN: Tree;
15347  *------------------------------------------------------------*;
15348  %let EM_ACTION = TRAIN;
15349  %let syscc = 0;
15350  %macro main;
15351
15352    %if %upcase(&EM_ACTION) = CREATE %then %do;
15353      filename temp catalog 'sashelp.emmodl.tree_create.source';
15354      %include temp;
15355      filename temp;
15356
15357      %em_tree_create;
15358    %end;
15359
15360     %else
15361     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15362
15363         filename temp catalog 'sashelp.emmodl.tree_train.source';
15364         %include temp;
15365         filename temp;
15366         %em_tree_train;
15367     %end;
15368
15369    %else
15370    %if %upcase(&EM_ACTION) = SCORE %then %do;
15371      filename temp catalog 'sashelp.emmodl.tree_score.source';
15372      %include temp;
15373      filename temp;
15374
15375      %em_tree_score;
15376
15377    %end;
15378
15379    %else
15380    %if %upcase(&EM_ACTION) = REPORT %then %do;
15381
15382         filename temp catalog 'sashelp.emmodl.tree_report.source';
15383         %include temp;
15384         filename temp;
15385
15386         %em_tree_report;
15387     %end;
15388
15389    %else
15390    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15391
15392         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15393         %include temp;
15394         filename temp;
15395         %EM_TREE_OPENTREEVIEWER;
15396
15397     %end;
15398
15399    %else
15400    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15401
15402         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15403         %include temp;
15404         filename temp;
15405         %EM_TREE_CLOSETREEVIEWER;
15406
15407     %end;
15408
15409
15410     %doendm:
15411  %mend main;
15412
15413  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15415 +%macro em_tree_train;
15417 +   %if &EM_IMPORT_DATA eq %then %do;
15418 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15419 +       %put &em_codebar;
15420 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15421 +       %put &errormsg;
15422 +       %put &em_codebar;
15423 +       %goto doendm;
15424 +   %end;
15425 +   %else
15426 +       %let EMEXCEPTIONSTRING =;
15428 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15429 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15430 +        %put &em_codebar;
15431 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15432 +        %put &errormsg;
15433 +        %put &em_codebar;
15434 +        %goto doendm;
15435 +   %end;
15437 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15438 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15439 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15440 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15441 +        %put &em_codebar;
15442 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15443 +        %put &errormsg;
15444 +        %put &em_codebar;
15445 +        %goto doendm;
15446 +   %end;
15448 +   /* Initialize property macro variables */
15449 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15450 +   %include temp;
15451 +   filename temp;
15453 +   %EM_SetProperties;
15455 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15456 +   %EM_GETNAME(key=EMTREE, type=DATA);
15457 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15458 +     /* if import eq Y and no importtable defined, throw an exception */
15459 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15460 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15461 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15462 +         %put &em_codebar;
15463 +         %put &errmsg;
15464 +         %put &em_codebar;
15465 +         %goto doendm;
15466 +      %end;
15467 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15468 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15469 +         %put &em_codebar;
15470 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15471 +         %put &errormsg;
15472 +         %put &em_codebar;
15473 +         %goto doendm;
15474 +      %end;
15475 +      %else %do;
15476 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15477 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15478 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15479 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15480 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15481 +         %let dsid = %sysfunc(close(&dsid));
15482 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15483 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15484 +            %put &em_codebar;
15485 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15486 +            %put &errormsg;
15487 +            %put &em_codebar;
15488 +            %goto doendm;
15489 +         %end;
15490 +      %end;
15491 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15492 +         proc delete data=&EM_USER_EMTREE;
15493 +         run;
15494 +      %end;
15495 +   %end;
15496 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15497 +      proc delete data=&EM_USER_EMTREE;
15498 +      run;
15499 +   %end;
15501 +   /* load tree macros */
15502 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15503 +   %include temp;
15504 +   filename temp;
15506 +   /* data sets */
15507 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15508 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15509 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15511 +   /* files */
15512 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15514 +   /* check actual num of target levels */
15515 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15516 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15517 +                              nLevel=_nTargetLevel );
15518 +      %if &_nTargetLevel  > 2 %then %do;
15519 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15520 +        %put &em_codebar;
15521 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15522 +        %put &errormsg;
15523 +        %put &em_codebar;
15524 +        %goto doendm;
15525 +      %end;
15526 +   %end;
15528 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15529 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15530 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15531 +        %let costflag=0;
15532 +        data _null_;
15533 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15534 +          if eof then call symput("costflag", _N_);
15535 +        run;
15536 +        %if &costflag gt 0 %then %do;
15537 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15538 +          %put &em_codebar;
15539 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15540 +          %put &errormsg;
15541 +          %put &em_codebar;
15542 +          %goto doendm;
15543 +       %end;
15544 +     %end;
15545 +   %end;
15547 +   /* determine if multiple targets will be processed */
15548 +   %let em_tree_multipleTargets=N;
15549 +   %let em_tree_numTarget = 1;
15550 +   %let em_tree_targetVars=;
15552 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15553 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15554 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15555 +         %let em_tree_multipleTargets=N;
15556 +      %end;
15557 +      %else %do;
15558 +         /* create macro array of targets  */
15559 +         data _null_;
15560 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15561 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15562 +           if eof then
15563 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15564 +        run;
15566 +        %if &em_tree_numTarget gt 1 %then %do;
15567 +           %let em_tree_multipleTargets=Y;
15568 +        %end;
15569 +      %end;
15570 +   %end;
15572 +   /* create view of only necessary variable for performance reasons */
15573 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15574 +   data &tempData / view=&tempData;
15575 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15576 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15577 +       %EM_TARGET
15578 +     %end;
15579 +     %else %do;
15580 +       %if &em_tree_numTarget ne 0 %then %do;
15581 +         %do i=1 %to &em_tree_numTarget;
15582 +            &&em_tree_targetVars&i
15583 +         %end;
15584 +       %end;
15585 +     %end;
15586 +     );
15587 +   run;
15589 +   /* run Tree procedure */
15590 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15592 +   /* Check return code and throw exception if error is detected */
15593 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15594 +   %if &syserr %then %do;
15595 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15596 +     %goto doendm;
15597 +   %end;
15599 +   /* add decision score code if multiple targets are processed */
15600 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15601 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15602 +   %end;
15604 +   /* create outfit dataset if multiple score statements have been executed */
15605 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15607 +   /* create English Rules */
15608 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15609 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15610 +       %em_tree_makeEnglishRules;
15612 +       /* English Rules */
15613 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15615 +     %end;
15616 +   filename x;
15618 +   %doendm:
15619 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15620 +%macro EM_SetProperties;
15622 +   /* train properties */
15623 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15665 +   /* properties for interactive sample */
15666 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15671 +   /* report properties */
15672 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15675 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15677 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15679 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15681 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15682 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15683 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15686 +   /* score properties */
15687 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15688 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15690 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15692 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15693 +  %global &nLevel;
15694 +  proc dmdb batch data=&indata
15695 +    classout=_tmp_dmdbout;
15696 +    class &target;
15697 +  run;
15698 +  data _tmp_dmdbout;
15699 +    set _tmp_dmdbout;
15700 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15701 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15702 +  run;
15703 +  data _null_;
15704 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15705 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15706 +    %let dsid = %sysfunc(close(&dsid));
15707 +     call symput("&nLevel", put(&_obs, Best12.));
15708 +  run;
15710 +  proc datasets lib=work nolist;
15711 +     delete _tmp_dmdbout;
15712 +  run;
15713 +  quit;
15714 +%Mend EM_CheckBinaryTargetLevel;
15717 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15719 +  /* determine the number of obs in training data */
15720 +  proc sql;
15721 +    reset noprint;
15722 +    select count(*) into :em_nobs from &indata;
15723 +  quit;
15725 +  /* determine the number of input variables */
15726 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15727 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15729 +  /* retrieve targetEvent from decmeta */
15730 +  %let targetEvent=;
15731 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15732 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15733 +      data _null_;
15734 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15735 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15736 +      run;
15737 +    %end;
15738 +  %end;
15740 +  /* create targetTable if multipleTar eq Y */
15741 +  data temptarget;
15742 +    set &EM_DATA_VARIABLESET;
15743 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15744 +  run;
15746 + /* data sets */
15747 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15748 + %EM_GETNAME(key=EMTREE,        type=DATA);
15749 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15750 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15751 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15752 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15753 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15754 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15755 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15756 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15758 + /* files */
15759 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15760 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15762 + /* turn on pmml if requested */
15763 + %let nnpmml=0;
15764 + %if %symexist(EM_PMML) %then %do;
15765 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15766 +       %let nnpmml=1;
15768 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15769 +%end;
15771 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15773 + %if &nnpmml or &numClassTarget %then %do;
15775 +       /* create dmdb needed for pmml generation */
15776 +       %let tree_maxlevel = 512;
15777 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15778 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15779 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15780 +         %end;
15781 +       %end;
15782 +       %if &tree_maxlevel gt 0 %then %do;
15783 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15784 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15785 +       %end;
15787 +       %let targetOrderString =;
15788 +       %let targetString = ;
15789 +       data _null_;
15790 +          length orderString nameString $10000;
15791 +          retain orderString nameString;
15792 +          set &em_data_variableset end=eof;
15793 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15794 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15795 +          %end;
15796 +          %else %do;
15797 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15798 +          %end;          select(order);
15799 +            when('')        order ='DESC';
15800 +            when('FMTASC')  order='ASCFMT';
15801 +            when('FMTDESC') order='DESFMT';
15802 +            otherwise;
15803 +          end;
15804 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15805 +          nameString = trim(nameString)!!' '!!trim(NAME);
15807 +          if eof then do;
15808 +             call symput('targetOrderString', trim(orderString));
15809 +             call symput('targetString', trim(nameString));
15810 +          end;
15811 +       run;
15813 +       %let arborkluge= "work._treeDMDB";
15815 +       proc dmdb batch data=&indata
15816 +       %if &nnpmml %then %do;
15817 +           PMML
15818 +       %end;
15819 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15822 +   %if &nnpmml %then %do;
15823 +        %if "%EM_ID" ne "" %then %do;
15824 +          id %EM_ID;
15825 +        %end;
15826 +        %if &EM_NUM_CLASS gt 0 %then %do;
15827 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15828 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15829 +               &targetOrderString;
15830 +        %end;
15831 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15832 +          var %EM_INTERVAL;
15833 +        %end;
15834 +        target &targetString %EM_INTERVAL_TARGET;
15835 +        %if "%EM_FREQ" ne "" %then %do;
15836 +          freq %EM_FREQ;
15837 +        %end;
15838 +  %end;
15839 +  %else %do;
15840 +      class  &targetOrderString;
15841 +      target &targetString %EM_INTERVAL_TARGET;
15842 +  %end;
15843 +       run;
15844 +       quit;
15846 +       proc datasets lib=work nolist;
15847 +          delete classout varout;
15848 +       run;
15849 +       quit;
15851 +    %end;
15852 + %end;
15854 + /* run Arbor procedure */
15855 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15856 +  proc arbor data=&INDATA
15858 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15859 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15860 +  %end;
15862 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15863 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15864 +  %end;
15866 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15867 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15868 +  %end;
15870 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15871 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15872 +  %end;
15874 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15875 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15876 +  %end;
15878 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15879 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15880 +  %end;
15881 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15882 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15883 +  %end;
15884 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15885 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15886 +  %end;
15888 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15889 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15890 +      alpha = &EM_PROPERTY_SIGLEVEL
15891 +    %end;
15892 +  %end;
15894 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15895 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15896 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15897 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15898 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15900 +        padjust =
15901 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15902 +          &chaid
15903 +        %end;
15904 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15905 +          DEPTH
15906 +        %end;
15907 +      %end;
15908 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15909 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15910 +         pvars = &num_inputs
15911 +      %end;
15912 +    %end;
15913 +  %end;
15914 +  %else %do;
15915 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15916 +         padjust = NONE
15917 +      %end;
15918 +  %end;
15920 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15921 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15922 +    Maxrules = &num_nrules
15923 +  %end;
15925 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15926 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15927 +    Maxsurrs = &num_nsurrs
15928 +  %end;
15930 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15931 +     Missing=&EM_PROPERTY_MISSINGVALUE
15932 +  %end;
15934 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15935 +     USEVARONCE
15936 +  %end;
15938 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15939 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15940 +  %end;
15943 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15944 +    event = "&targetEvent"
15945 +  %end;
15947 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15948 +     DECSEARCH
15949 +  %end;
15951 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15952 +     PRIORSSEARCH
15953 +  %end;
15955 +  %if &arbor_1 ne %then %do;
15956 +    &arbor_1
15957 +  %end;
15959 +  %if &em_arbor ne %then %do;
15960 +     &em_arbor
15961 +  %end;
15962 +  ;
15963 + %end;
15964 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15965 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15966 +       interact;
15967 + %end;
15968 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15969 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15970 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15971 +    %put &em_codebar;
15972 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15973 +    %put &errormsg;
15974 +    %put &em_codebar;
15975 +    %goto doendm;
15976 +   %end;
15977 +   %else %do;
15978 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15979 +       interact;
15980 +   %end;
15981 + %end;
15983 + %else %do;
15984 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15985 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15986 +    %put &em_codebar;
15987 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15988 +    %put &errormsg;
15989 +    %put &em_codebar;
15990 +    %goto doendm;
15991 +   %end;
15992 +   %else %do;
15993 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15994 +        interact;
15995 +   %end;
15996 + %end;
15998 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15999 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16000 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16001 +    %end;
16003 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16004 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16005 +    %end;
16007 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16008 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16009 +    %end;
16011 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16012 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16013 +    %end;
16015 +    %if "%EM_FREQ" ne "" %then %do;
16016 +       freq %EM_FREQ;
16017 +    %end;
16019 +    %if "&multipleTar" eq "Y" %then %do;
16020 +       /* cycle through all target vars in variableset */
16021 +       %let tdsid = %sysfunc(open(temptarget));
16022 +       %if &tdsid %then %do;
16023 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16024 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16025 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16026 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16027 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16028 +             target &var / level = &lvl
16029 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16030 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16031 +             %end;
16032 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16033 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16034 +             %end;
16035 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16036 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16037 +             %end;
16038 +          %end;
16039 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16040 +       %end;
16041 +       useTarget variable = %EM_TARGET;
16042 +    %end;
16043 +    %else %do;
16044 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16045 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16046 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16047 +      %end;
16048 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16049 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16050 +      %end;
16051 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16052 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16053 +      %end;
16054 +    %end;
16056 +    %if "&multipleTar" eq "N" %then %do;
16057 +      &EM_DEC_STATEMENT;
16058 +    %end;
16060 +    Performance &EM_PROPERTY_PERFORMANCE
16061 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16062 +      nodesize=&EM_PROPERTY_NODESAMPLE
16063 +    %end;
16064 +    ;
16066 +    %if "&intFlag" eq "Y" %then %do;
16067 +       INTERACT Largest;
16068 +       Train maxnewdepth=0;
16069 +    %end;
16071 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16072 +         Assess
16073 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16074 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16075 +              %put &em_codebar;
16076 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16077 +              %put &errormsg;
16078 +              %put &em_codebar;
16079 +            %end;
16080 +            %else %do;
16081 +               Validata=&EM_IMPORT_VALIDATE
16082 +            %end;
16083 +         %end;
16084 +         %else %do;
16085 +           NoValidata
16086 +         %end;
16087 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16088 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16089 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16090 +               %if &dsid %then %do;
16091 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16092 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16093 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16094 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16095 +                   %else %do;
16096 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16097 +                      %else %let measure= MISC;
16098 +                   %end;
16099 +                 %end;
16100 +               %end;
16101 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16102 +            %end;
16103 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16104 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16105 +                 %let measure=ASE;
16106 +              %end;
16107 +              %else %do;
16108 +                 %let measure=MISC;
16109 +              %end;
16110 +            %end;
16111 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16112 +              %let measure=ASE;
16113 +            %end;
16114 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16115 +               %let measure = LIFT;
16116 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16117 +               %if &dsid %then %do;
16118 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16119 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16120 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16121 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16122 +                 %end;
16123 +               %end;
16124 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16125 +            %end;
16126 +            measure=&measure
16127 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16128 +               event = "&targetEvent"
16129 +            %end;
16130 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16131 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16132 +            %end;
16133 +         %end;
16134 +         %if "&multipleTar" eq "N" %then %do;
16135 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16136 +               CV
16137 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16138 +                 CVNITer = &EM_PROPERTY_CVNITER
16139 +               %end;
16140 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16141 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16142 +               %end;
16143 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16144 +                 CVSeed = &EM_PROPERTY_CVSEED
16145 +               %end;
16146 +            %end;
16147 +         %end;
16148 +       %end;
16149 +      ;
16151 +      %if "&intFlag" ne "Y" %then %do;
16152 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16153 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16154 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16155 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16157 +          SUBTREE &subtree
16158 +          %if "&subtree" eq "NLEAVES" %then %do;
16159 +            =&EM_PROPERTY_NSUBTREE
16160 +          %end;
16161 +          ;
16162 +        %end;
16164 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16165 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16166 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16167 +          %end;
16168 +       %end;
16169 +      %end;
16170 + %end;
16173 + MakeMacro nleaves = nleaves;
16174 + save
16175 + %if "&EM_USER_EMTREE" ne "" %then %do;
16176 +   MODEL=&EM_USER_EMTREE
16177 + %end;
16178 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16179 +   SEQUENCE=&EM_USER_OUTSEQ
16180 + %end;
16181 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16182 +   IMPORTANCE=&EM_USER_OUTIMPORT
16183 + %end;
16184 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16185 +   NODESTAT=&EM_USER_OUTNODES
16186 + %end;
16187 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16188 +   SUMMARY=&EM_USER_OUTSUMMARY
16189 + %end;
16190 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16191 +   STATSBYNODE=&EM_USER_OUTSTATS
16192 + %end;
16193 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16194 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16195 + %end;
16196 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16197 +   Pathlistnonmissing=&EM_USER_OUTPATH
16198 + %end;
16199 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16200 +   RULES = &EM_USER_OUTRULES
16201 + %end;
16202 + ;
16204 + %if "&intFlag" ne "Y" %then %do;
16206 +   %let lookupString = ;
16207 +   %if ^%symexist(EM_OPTION) %then
16208 +      %let EM_OPTION=;
16210 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16211 +      %let lookupString = LOOKUP=SELECT;
16212 +   %end;
16214 +   %let codetext=;
16215 +   %let norescodetxt=;
16217 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16218 +     %let codetext=&codetext DUMMY;
16219 +     %let norescodetxt=&norescodetxt DUMMY;
16220 +   %end;
16221 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16222 +     %let codetext=&codetext NOLEAFID;
16223 +     %let norescodetxt=&norescodetxt NOLEAFID;
16224 +   %end;
16225 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16226 +     %let norescodetxt=&norescodetxt NOPRED;
16227 +   %end;
16229 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16230 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16232 +   %if &nnpmml %then %do;
16233 +     code pmml;
16234 +   %end;
16236 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16237 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16238 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16239 +   %end;
16240 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16241 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16242 +   %end;
16243 + %end;
16245 + run;
16246 + quit;
16248 + /*%em_checkerror(); */
16249 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16250 +   /* Delete DMDB catalog */
16251 +   proc datasets lib=work nolist;
16252 +       delete _treeDMDB / mt=cat;
16253 +  run;
16254 +  %end;
16256 + %if &nnpmml %then %do;
16257 +    ods pmml close;
16258 + %end;
16260 +  %doendm:
16262 +%mend em_tree_runTreeProcedure;
16264 +%macro em_tree_createFitStats( multipleTar= );
16267 +  /* create targetTable is multipleTar eq Y */
16268 +  data temptarget;
16269 +    set &EM_DATA_VARIABLESET;
16270 +    where ROLE="TARGET";
16271 +  run;
16273 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16274 +   data &EM_USER_EMOUTFIT;
16275 +     length target $32;
16276 +     merge work.fit_train
16277 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16278 +       work.fit_valid
16279 +     %end;
16280 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16281 +       work.fit_test
16282 +     %end;
16283 +     ;
16284 +     %if "&multipleTar" eq "N" %then %do;
16285 +       target="%EM_TARGET";
16286 +     %end;
16287 +     %else %do;
16288 +       target = _TARGET_;
16289 +     %end;
16290 +     drop _NW_ _SUMW_
16291 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16292 +        _VSUMW_
16293 +     %end;
16294 +     ;
16295 +   run;
16297 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16298 +     proc datasets library=work nolist;
16299 +       delete fit_valid;
16300 +     run;
16301 +   %end;
16302 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16303 +     proc datasets library=work nolist;
16304 +       delete fit_test;
16305 +     run;
16306 +   %end;
16308 +%mend em_tree_createFitStats;
16311 +%macro em_tree_makeEnglishRules;
16313 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16314 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16316 +  /* verify that necessary tables exist and if not, skip processing */
16317 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16318 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16319 +    %goto doendm;
16320 +  %end;
16321 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16322 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16323 +    %goto doendm;
16324 +  %end;
16326 +  /* determine length of variable in outpath dataset */
16327 +  %let vlength= ;
16328 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16329 +  %if &dsid ne %then %do;
16330 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16331 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16332 +  %end;
16333 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16335 +  data tempoutpath;
16336 +    length varname $&vlength;
16337 +    retain varname;
16338 +    set &EM_USER_OUTPATH;
16340 +    if ^missing(variable) then varname=variable;
16341 +    else if ^missing(var_name) then varname=var_name;
16342 +    output;
16343 +  run;
16345 +  /* create an array of generated predicted variable names */
16346 +  %let tree_pred_vars = ;
16347 +  %let tree_pred_label = ;
16348 +  %let numpred= 0;
16349 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16351 +    data _null_;
16352 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16353 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16354 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16355 +     if eof then
16356 +       call symput('numpred', strip(put(_N_, BEST.)));
16357 +    run;
16358 +  %end;
16360 +  /* determine if NPRIORS exists in outnodes  */
16361 +  %local nprior_flag;
16362 +  data _null_;
16363 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16364 +    if eof then do;
16365 +      call symput('nprior_flag', strip(put(npriors, best.)));
16366 +    end;
16367 +  run;
16369 +  proc sort data=tempoutpath; by node; run;
16370 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16372 +  data tempoutpath;
16373 +    merge tempoutpath(in=_a) outnodes(keep= node
16374 +    %if "&nprior_flag" ne "." %then %do;
16375 +      NPRIORS
16376 +    %end;
16377 +    %else %do;
16378 +      N
16379 +    %end;
16380 +    %if &numpred gt 0 %then %do;
16381 +      %do i=1 %to &numpred;
16382 +        &&tree_pred_vars&i
16383 +      %end;
16384 +    %end;
16385 +    );
16386 +    by node;
16387 +    if _a;
16388 +  run;
16390 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16392 +  data _null_;
16393 +    file x;
16394 +    set tempoutpath;
16395 +    by node descending varname;
16396 +    retain origvar oldnode string;
16397 +    length origvar $32 oldnode 8 string $200;
16399 +    if _N_ = 1 then do;
16400 +      origvar = varname;
16401 +      oldnode = node;
16402 +    end;
16404 +    if first.node then do;
16405 +       put "&EM_CODEBAR";
16406 +       put " Node = " node;
16407 +       put "&EM_CODEBAR";
16408 +    end;
16410 +      if first.varname then do;
16411 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16412 +            if MISSING(CHARACTER_VALUE) then do;
16413 +             if NUMERIC_VALUE ne .  then do;
16414 +              if ^first.node then do;
16415 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16416 +              end;
16417 +              else do;
16418 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16419 +              end;
16420 +             end;
16421 +            end;
16422 +            else do;
16423 +              if ^first.node then do;
16424 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16425 +              end;
16426 +              else do;
16427 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16428 +              end;
16429 +             end;
16430 +         end;
16431 +         else if RELATION in ("=") then do;
16432 +            if ^first.node then do;
16433 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16434 +            end;
16435 +            else do;
16436 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16437 +            end;
16438 +         end;
16439 +         else if RELATION in ("ISMISSING") then do;
16440 +            if ^first.node then do;
16441 +              string = " AND "|| strip(varname) || " equals Missing";
16442 +            end;
16443 +            else do;
16444 +              string = "if "|| strip(varname) ||" equals Missing";
16445 +            end;
16446 +         end;
16447 +         else if RELATION in ("ISNOTMISSING") then do;
16448 +            if ^first.node then do;
16449 +              string = " AND "|| strip(varname) || " equals All Values";
16450 +            end;
16451 +            else do;
16452 +              string = "if "|| strip(varname) ||" equals All Values";
16453 +            end;
16454 +         end;
16455 +         if ^missing(varname) then origvar = varname;
16456 +         oldnode=node;
16458 +      end;
16459 +      else do;
16460 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16461 +          if MISSING(CHARACTER_VALUE) then do;
16462 +           if  NUMERIC_VALUE ne .  then do;
16463 +            if ^MISSING(string) then
16464 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16465 +            else
16466 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16467 +           end;
16468 +          end;
16469 +          else do;
16470 +            if ^MISSING(string) then
16471 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16472 +            else
16473 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16474 +          end;
16476 +         end;
16477 +         else if RELATION in ("=") then do;
16478 +           string = strip(string)||", "||strip(character_value);
16479 +         end;
16480 +         else if RELATION in ("ISMISSING") then do;
16482 +         end;
16483 +         if ^missing(varname) then origvar = varname;
16484 +         oldnode=node;
16485 +      end;
16486 +      if last.varname then do;
16487 +         if RELATION in ("ISMISSING") then do;
16488 +           if ^first.varname then do;
16489 +             string = strip(string) || " or MISSING";
16490 +           end;
16491 +         end;
16492 +         put string;
16493 +         if ^missing(varname) then origvar = varname;
16494 +         oldnode=node;
16495 +      end;
16497 +      if last.node then do;
16498 +         put "then ";
16499 +         put " Tree Node Identifier   = " node;
16501 +         %if "&nprior_flag" ne "." %then %do;
16502 +           put " Number of Observations = " NPRIORS;
16503 +         %end;
16504 +         %else %do;
16505 +           put " Number of Observations = " N;
16506 +         %end;
16508 +         %if &numpred gt 0 %then %do;
16509 +           %do i=1 %to &numpred;
16510 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16511 +           %end;
16512 +         %end;
16514 +         put " ";
16515 +         if ^missing(varname) then origvar = varname;
16516 +         oldnode=node;
16517 +      end;
16519 +  run;
16521 +  proc datasets lib=work nolist;
16522 +    delete tempoutpath outnodes;
16523 +  run;
16525 +  %doendm:
16526 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS2.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
NOTE: There were 3939 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_CHURN_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 3939   Memory used = 511K.
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
NOTE: There were 3939 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 3939 observations read from the data set EMWS2.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1601202 kilobytes of physical memory.
NOTE: Will use 3939 out of 3939 training cases.
NOTE: Using memory pool with 151368704 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 1493472 bytes of work memory.
NOTE: The subtree sequence contains 43 subtrees. The largest has 85 nodes and 43 leaves.
NOTE: Using subtree with 39 nodes and 20 leaves.
NOTE: Using subtree with 39 nodes and 20 leaves.
NOTE: Created macro variable NLEAVES equal to 20.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 14 observations and 6 variables.
NOTE: The data set EMWS2.TREE_EMTREE has 2563 observations and 4 variables.
NOTE: The data set EMWS2.TREE_OUTNODES has 39 observations and 24 variables.
NOTE: The data set EMWS2.TREE_OUTPATH has 204 observations and 7 variables.
NOTE: The data set EMWS2.TREE_OUTRULES has 495 observations and 6 variables.
NOTE: The data set EMWS2.TREE_OUTSEQ has 43 observations and 20 variables.
NOTE: The data set EMWS2.TREE_OUTSTATS has 273 observations and 5 variables.
NOTE: The data set EMWS2.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS2.TREE_OUTTOPOLOGY has 39 observations and 5 variables.
NOTE: External file D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\TREEFLOW.sas opened.
NOTE: External file D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
NOTE: There were 3939 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS2.EM_TREE.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.07 seconds
 
NOTE: There were 3939 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 3939 observations read from the data set EMWS2.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.22 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS2.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 204 observations read from the data set EMWS2.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 204 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_CHURN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 204 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 204 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 39 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 204 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 39 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 204 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 204 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 204 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=07Jan2024:01:49:52,
      Create Time=07Jan2024:01:49:52
 
NOTE: 277 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 87.
NOTE: There were 204 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16528
16529  *------------------------------------------------------------*;
16530  * End TRAIN: Tree;
16531  *------------------------------------------------------------*;
 
16532  *------------------------------------------------------------*;
16533  * Close any missing semi colons;
16534  *------------------------------------------------------------*;
16535  ;
16536  ;
16537  ;
16538  ;
16539  quit;
16540  *------------------------------------------------------------*;
16541  * Close any unbalanced quotes;
16542  *------------------------------------------------------------*;
16543  /*; *"; *'; */
16544  ;
16545  run;
16546  quit;
16547  /* Reset EM Options */
16548  options formchar="|----|+|---+=|-/\<>*";
16549  options nocenter ls=256 ps=10000;
16550  goptions reset=all device=GIF NODISPLAY;
 
16551  proc sort data=WORK.EM_USER_REPORT;
16552  by ID VIEW;
16553  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                January 07, 2024
Time:                01:49:52
*------------------------------------------------------------*
16655  %let EMEXCEPTIONSTRING=;
16656  *------------------------------------------------------------*;
16657  * SCORE: Tree;
16658  *------------------------------------------------------------*;
16659  %let EM_ACTION = SCORE;
16660  %let syscc = 0;
16661  %macro main;
16662
16663    %if %upcase(&EM_ACTION) = CREATE %then %do;
16664      filename temp catalog 'sashelp.emmodl.tree_create.source';
16665      %include temp;
16666      filename temp;
16667
16668      %em_tree_create;
16669    %end;
16670
16671     %else
16672     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16673
16674         filename temp catalog 'sashelp.emmodl.tree_train.source';
16675         %include temp;
16676         filename temp;
16677         %em_tree_train;
16678     %end;
16679
16680    %else
16681    %if %upcase(&EM_ACTION) = SCORE %then %do;
16682      filename temp catalog 'sashelp.emmodl.tree_score.source';
16683      %include temp;
16684      filename temp;
16685
16686      %em_tree_score;
16687
16688    %end;
16689
16690    %else
16691    %if %upcase(&EM_ACTION) = REPORT %then %do;
16692
16693         filename temp catalog 'sashelp.emmodl.tree_report.source';
16694         %include temp;
16695         filename temp;
16696
16697         %em_tree_report;
16698     %end;
16699
16700    %else
16701    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16702
16703         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16704         %include temp;
16705         filename temp;
16706         %EM_TREE_OPENTREEVIEWER;
16707
16708     %end;
16709
16710    %else
16711    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16712
16713         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16714         %include temp;
16715         filename temp;
16716         %EM_TREE_CLOSETREEVIEWER;
16717
16718     %end;
16719
16720
16721     %doendm:
16722  %mend main;
16723
16724  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16726 +%macro em_tree_score;
16728 +   /* determine if multiple targets will be processed */
16729 +   %let em_tree_multipleTargets=N;
16730 +   %let em_tree_numTarget=1;
16731 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16732 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16733 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16734 +         %let em_tree_multipleTargets=N;
16735 +      %end;
16736 +      %else %do;
16737 +         /* create macro array of targets  */
16738 +         data _null_;
16739 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16740 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16741 +           if eof then
16742 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16743 +        run;
16745 +        %if &em_tree_numTarget gt 1 %then %do;
16746 +           %let em_tree_multipleTargets=Y;
16747 +        %end;
16748 +      %end;
16749 +   %end;
16751 +   /* build flow and publish scoring code */
16752 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16753 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16755 +   filename treeflow "&EM_USER_TREEFLOW";
16756 +   filename treepub "&EM_USER_TREEPUBLISH";
16758 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16759 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16761 +   %em_copyfile(infref=treeflow, outfref=flowref);
16762 +   %em_copyfile(infref=treepub, outfref=pubref);
16764 +   filename treeflow;
16765 +   filename treepub;
16767 +   /* if priors are used, add code to generate unadjusted residuals in export */
16768 +   %let useAdjPriors = N;
16769 +   data _null_;
16770 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16771 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16772 +   run;
16773 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16774 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16775 +      %include temp;
16776 +      filename temp;
16778 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16779 +      filename adjref "&EM_USER_adjResidualCode";
16780 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16782 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16784 +      filename adjref;
16785 +   %end;
16787 +   /* LEAF */
16788 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16789 +      data _null_;
16790 +        file flowref mod;
16791 +        put 'drop _LEAF_;';
16792 +      run;
16794 +      data _null_;
16795 +        file pubref mod;
16796 +        put 'drop _LEAF_;';
16797 +      run;
16799 +   %end;
16801 +   filename flowref;
16802 +   filename pubref;
16804 +   /* em_metachange code */
16805 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16806 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16807 +   %end;
16809 +   /* variable selection based on importance stat    */
16810 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16811 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16812 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16813 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16814 +     %let obs = %sysfunc(fetch(&dsid));
16815 +     %do %while(&obs=0);
16816 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16817 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16818 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16819 +       %let obs = %sysfunc(fetch(&dsid));
16820 +     %end;
16821 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16822 +   %end;
16824 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16825 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16826 +    %let tree_pred_vars = ;
16827 +    %let tree_pred_lvl =;
16828 +    %let numpred= 0;
16830 +    data _null_;
16831 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16832 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16833 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16834 +     if eof then
16835 +       call symput('numpred', strip(put(_N_, BEST.)));
16836 +    run;
16837 +   %end;
16839 +   %if &numpred ne 0 %then %do;
16840 +    %do i=1 %to &numpred;
16841 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16842 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16843 +    %end;
16844 +   %end;
16846 +   /* determine if multiple targets will be processed */
16847 +   %let em_tree_multipleTargets=N;
16848 +   %let em_tree_numTarget=1;
16849 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16850 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16851 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16852 +         %let em_tree_multipleTargets=N;
16853 +      %end;
16854 +      %else %do;
16855 +        data _null_;
16856 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16857 +          if eof then
16858 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16859 +        run;
16861 +        %if &em_tree_numTarget gt 1 %then %do;
16862 +           %let em_tree_multipleTargets=Y;
16863 +        %end;
16864 +     %end;
16865 +   %end;
16867 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16868 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16870 +      /* variable importance */
16871 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16872 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16874 +         %let validexist=0;
16875 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16876 +           %let validexist=1;
16877 +         %end;
16879 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16880 +         /* and the columns may not be generated                                                                                 */
16881 +         %let em_tree_cvexists=;
16882 +         %let em_tree_surrexists=.;
16883 +         data _null_;
16884 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16885 +            if eof then do ;
16886 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16887 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16888 +            end;
16889 +         run;
16891 +         data &EM_USER_OUTIMPORT;
16892 +            set &EM_USER_OUTIMPORT;
16894 +            /* format columns based on Precison value specified */
16895 +            format importance 15.&EM_PROPERTY_PRECISION
16896 +                 %if &validexist %then %do;
16897 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16898 +                 %end;
16899 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16900 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16901 +                 %end;
16902 +            ;
16903 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16904 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16905 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16906 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16907 +                 %if "&em_tree_surrexists" ne "" %then %do;
16908 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16909 +                 %end;
16910 +                 %if &validexist %then %do;
16911 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16912 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16913 +                 %end;
16914 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16915 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16916 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16917 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16918 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16919 +                 %end;
16920 +            ;
16921 +         run;
16923 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16924 +      %end;
16925 +   %end;
16927 +   %doendm:
16928 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=07Jan2024:01:49:52,
      Create Time=07Jan2024:01:49:52
 
NOTE: 372 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 72.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=07Jan2024:01:49:52,
      Create Time=07Jan2024:01:49:52
 
NOTE: 350 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 72.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_CHURN_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=14288,
      Last Modified=07Jan2024:01:49:52,
      Create Time=07Jan2024:01:49:52
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=13646,
      Last Modified=07Jan2024:01:49:52,
      Create Time=07Jan2024:01:49:52
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_CHURN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 14 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
16929
16930  *------------------------------------------------------------*;
16931  * End SCORE: Tree;
16932  *------------------------------------------------------------*;
 
16933  proc sort data=WORK.EM_METACHANGE;
16934  by key uname;
16935  run;
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16936  filename x "D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\CDELTA_TRAIN.sas";
16937  data _null_;
16938  file x;
16939  put 'if upcase(NAME) = "COUPONUSED" then do;';
16940  put 'ROLE = "REJECTED";';
16941  put 'end;';
16942  put 'else ';
16943  put 'if upcase(NAME) = "HOURSPENDONAPP" then do;';
16944  put 'ROLE = "REJECTED";';
16945  put 'end;';
16946  put 'else ';
16947  put 'if upcase(NAME) = "Q_CHURNFALSE" then do;';
16948  put 'ROLE = "ASSESS";';
16949  put 'end;';
16950  put 'else ';
16951  put 'if upcase(NAME) = "Q_CHURNTRUE" then do;';
16952  put 'ROLE = "ASSESS";';
16953  put 'end;';
16954  put 'else ';
16955  put 'if upcase(NAME) = "_NODE_" then do;';
16956  put 'ROLE = "SEGMENT";';
16957  put 'LEVEL = "NOMINAL";';
16958  put 'end;';
16959  run;
 
NOTE: The file X is:
      Filename=D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=07Jan2024:01:49:52,
      Create Time=07Jan2024:01:48:26
 
NOTE: 20 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 43.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16960  filename x;
NOTE: Fileref X has been deassigned.
 
16961  filename emflow "D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
16962  *------------------------------------------------------------*;
16963  * Tree: Scoring DATA data;
16964  *------------------------------------------------------------*;
16965  data EMWS2.Tree_TRAIN
16966  / view=EMWS2.Tree_TRAIN
16967  ;
16968  set EMWS2.Part_TRAIN
16969  ;
16970  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas.
16971 +****************************************************************;
16972 +******             DECISION TREE SCORING CODE             ******;
16973 +****************************************************************;
16974 +
16975 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16976 +LENGTH F_Churn  $    5;
16977 +LENGTH I_Churn  $    5;
16978 +LENGTH U_Churn  $    5;
16979 +LENGTH _WARN_  $    4;
16980 +
16981 +******              LABELS FOR NEW VARIABLES              ******;
16982 +label _NODE_ = 'Node' ;
16983 +label _LEAF_ = 'Leaf' ;
16984 +label P_Churntrue = 'Predicted: Churn=true' ;
16985 +label P_Churnfalse = 'Predicted: Churn=false' ;
16986 +label Q_Churntrue = 'Unadjusted P: Churn=true' ;
16987 +label Q_Churnfalse = 'Unadjusted P: Churn=false' ;
16988 +label V_Churntrue = 'Validated: Churn=true' ;
16989 +label V_Churnfalse = 'Validated: Churn=false' ;
16990 +label R_Churntrue = 'Residual: Churn=true' ;
16991 +label R_Churnfalse = 'Residual: Churn=false' ;
16992 +label F_Churn = 'From: Churn' ;
16993 +label I_Churn = 'Into: Churn' ;
16994 +label U_Churn = 'Unnormalized Into: Churn' ;
16995 +label _WARN_ = 'Warnings' ;
16996 +
16997 +
16998 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16999 +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
17000 +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
17001 +LENGTH _ARBFMT_11 $     11; DROP _ARBFMT_11;
17002 +_ARBFMT_11 = ' '; /* Initialize to avoid warning. */
17003 +LENGTH _ARBFMT_18 $     18; DROP _ARBFMT_18;
17004 +_ARBFMT_18 = ' '; /* Initialize to avoid warning. */
17005 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17006 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17007 +LENGTH _ARBFMT_8 $      8; DROP _ARBFMT_8;
17008 +_ARBFMT_8 = ' '; /* Initialize to avoid warning. */
17009 +LENGTH _ARBFMT_6 $      6; DROP _ARBFMT_6;
17010 +_ARBFMT_6 = ' '; /* Initialize to avoid warning. */
17011 +
17012 +
17013 +_ARBFMT_5 = PUT( Churn , $5.);
17014 + %DMNORMCP( _ARBFMT_5, F_Churn );
17015 +
17016 +******             ASSIGN OBSERVATION TO NODE             ******;
17017 +IF  NOT MISSING(Tenure ) AND
17018 +  Tenure  <                  1.5 THEN DO;
17019 +  _ARBFMT_5 = PUT( Complain , $5.);
17020 +   %DMNORMIP( _ARBFMT_5);
17021 +  IF _ARBFMT_5 IN ('TRUE' ) THEN DO;
17022 +    IF  NOT MISSING(DaySinceLastOrder ) AND
17023 +      DaySinceLastOrder  <                  1.5 THEN DO;
17024 +      _ARBFMT_8 = PUT( MaritalStatus , $8.);
17025 +       %DMNORMIP( _ARBFMT_8);
17026 +      IF _ARBFMT_8 IN ('MARRIED' ) THEN DO;
17027 +        IF  NOT MISSING(SatisfactionScore ) AND
17028 +          SatisfactionScore  <                  3.5 THEN DO;
17029 +          IF  NOT MISSING(OrderAmountHikeFromlastYear ) AND
17030 +            OrderAmountHikeFromlastYear  <                 12.5 THEN DO;
17031 +            _NODE_  =                   62;
17032 +            _LEAF_  =                    9;
17033 +            P_Churntrue  =                    1;
17034 +            P_Churnfalse  =                    0;
17035 +            Q_Churntrue  =                    1;
17036 +            Q_Churnfalse  =                    0;
17037 +            V_Churntrue  =                    1;
17038 +            V_Churnfalse  =                    0;
17039 +            I_Churn  = 'TRUE' ;
17040 +            U_Churn  = 'true' ;
17041 +            END;
17042 +          ELSE DO;
17043 +            _NODE_  =                   63;
17044 +            _LEAF_  =                   10;
17045 +            P_Churntrue  =     0.22222222222222;
17046 +            P_Churnfalse  =     0.77777777777777;
17047 +            Q_Churntrue  =     0.22222222222222;
17048 +            Q_Churnfalse  =     0.77777777777777;
17049 +            V_Churntrue  =                  0.4;
17050 +            V_Churnfalse  =                  0.6;
17051 +            I_Churn  = 'FALSE' ;
17052 +            U_Churn  = 'false' ;
17053 +            END;
17054 +          END;
17055 +        ELSE DO;
17056 +          _NODE_  =                   39;
17057 +          _LEAF_  =                   11;
17058 +          P_Churntrue  =     0.94736842105263;
17059 +          P_Churnfalse  =     0.05263157894736;
17060 +          Q_Churntrue  =     0.94736842105263;
17061 +          Q_Churnfalse  =     0.05263157894736;
17062 +          V_Churntrue  =                    1;
17063 +          V_Churnfalse  =                    0;
17064 +          I_Churn  = 'TRUE' ;
17065 +          U_Churn  = 'true' ;
17066 +          END;
17067 +        END;
17068 +      ELSE DO;
17069 +        _NODE_  =                   21;
17070 +        _LEAF_  =                   12;
17071 +        P_Churntrue  =     0.96078431372549;
17072 +        P_Churnfalse  =      0.0392156862745;
17073 +        Q_Churntrue  =     0.96078431372549;
17074 +        Q_Churnfalse  =      0.0392156862745;
17075 +        V_Churntrue  =     0.95833333333333;
17076 +        V_Churnfalse  =     0.04166666666666;
17077 +        I_Churn  = 'TRUE' ;
17078 +        U_Churn  = 'true' ;
17079 +        END;
17080 +      END;
17081 +    ELSE DO;
17082 +      _NODE_  =                   11;
17083 +      _LEAF_  =                   13;
17084 +      P_Churntrue  =     0.62068965517241;
17085 +      P_Churnfalse  =     0.37931034482758;
17086 +      Q_Churntrue  =     0.62068965517241;
17087 +      Q_Churnfalse  =     0.37931034482758;
17088 +      V_Churntrue  =     0.79787234042553;
17089 +      V_Churnfalse  =     0.20212765957446;
17090 +      I_Churn  = 'TRUE' ;
17091 +      U_Churn  = 'true' ;
17092 +      END;
17093 +    END;
17094 +  ELSE DO;
17095 +    _ARBFMT_11 = PUT( PreferredPaymentMode , $11.);
17096 +     %DMNORMIP( _ARBFMT_11);
17097 +    IF _ARBFMT_11 IN ('COD' ,'E WALLET' ) THEN DO;
17098 +      _ARBFMT_8 = PUT( MaritalStatus , $8.);
17099 +       %DMNORMIP( _ARBFMT_8);
17100 +      IF _ARBFMT_8 IN ('DIVORCED' ,'MARRIED' ) THEN DO;
17101 +        _ARBFMT_18 = PUT( PreferedOrderCat , $18.);
17102 +         %DMNORMIP( _ARBFMT_18);
17103 +        IF _ARBFMT_18 IN ('LAPTOP & ACCESSORY' ) THEN DO;
17104 +          _NODE_  =                   33;
17105 +          _LEAF_  =                    3;
17106 +          P_Churntrue  =                    0;
17107 +          P_Churnfalse  =                    1;
17108 +          Q_Churntrue  =                    0;
17109 +          Q_Churnfalse  =                    1;
17110 +          V_Churntrue  =                    0;
17111 +          V_Churnfalse  =                    1;
17112 +          I_Churn  = 'FALSE' ;
17113 +          U_Churn  = 'false' ;
17114 +          END;
17115 +        ELSE DO;
17116 +          IF  NOT MISSING(CityTier ) AND
17117 +            CityTier  <                  1.5 THEN DO;
17118 +            _NODE_  =                   56;
17119 +            _LEAF_  =                    1;
17120 +            P_Churntrue  =     0.31578947368421;
17121 +            P_Churnfalse  =     0.68421052631578;
17122 +            Q_Churntrue  =     0.31578947368421;
17123 +            Q_Churnfalse  =     0.68421052631578;
17124 +            V_Churntrue  =                  0.4;
17125 +            V_Churnfalse  =                  0.6;
17126 +            I_Churn  = 'FALSE' ;
17127 +            U_Churn  = 'false' ;
17128 +            END;
17129 +          ELSE DO;
17130 +            _NODE_  =                   57;
17131 +            _LEAF_  =                    2;
17132 +            P_Churntrue  =                 0.85;
17133 +            P_Churnfalse  =                 0.15;
17134 +            Q_Churntrue  =                 0.85;
17135 +            Q_Churnfalse  =                 0.15;
17136 +            V_Churntrue  =                  0.9;
17137 +            V_Churnfalse  =                  0.1;
17138 +            I_Churn  = 'TRUE' ;
17139 +            U_Churn  = 'true' ;
17140 +            END;
17141 +          END;
17142 +        END;
17143 +      ELSE DO;
17144 +        IF  NOT MISSING(SatisfactionScore ) AND
17145 +          SatisfactionScore  <                  1.5 THEN DO;
17146 +          _NODE_  =                   34;
17147 +          _LEAF_  =                    4;
17148 +          P_Churntrue  =     0.28571428571428;
17149 +          P_Churnfalse  =     0.71428571428571;
17150 +          Q_Churntrue  =     0.28571428571428;
17151 +          Q_Churnfalse  =     0.71428571428571;
17152 +          V_Churntrue  =                    0;
17153 +          V_Churnfalse  =                    1;
17154 +          I_Churn  = 'FALSE' ;
17155 +          U_Churn  = 'false' ;
17156 +          END;
17157 +        ELSE DO;
17158 +          _NODE_  =                   35;
17159 +          _LEAF_  =                    5;
17160 +          P_Churntrue  =     0.92857142857142;
17161 +          P_Churnfalse  =     0.07142857142857;
17162 +          Q_Churntrue  =     0.92857142857142;
17163 +          Q_Churnfalse  =     0.07142857142857;
17164 +          V_Churntrue  =                 0.85;
17165 +          V_Churnfalse  =                 0.15;
17166 +          I_Churn  = 'TRUE' ;
17167 +          U_Churn  = 'true' ;
17168 +          END;
17169 +        END;
17170 +      END;
17171 +    ELSE DO;
17172 +      IF  NOT MISSING(DaySinceLastOrder ) AND
17173 +        DaySinceLastOrder  <                  1.5 THEN DO;
17174 +        _NODE_  =                   18;
17175 +        _LEAF_  =                    6;
17176 +        P_Churntrue  =                  0.5;
17177 +        P_Churnfalse  =                  0.5;
17178 +        Q_Churntrue  =                  0.5;
17179 +        Q_Churnfalse  =                  0.5;
17180 +        V_Churntrue  =                 0.54;
17181 +        V_Churnfalse  =                 0.46;
17182 +        I_Churn  = 'TRUE' ;
17183 +        U_Churn  = 'true' ;
17184 +        END;
17185 +      ELSE DO;
17186 +        IF  NOT MISSING(OrderCount ) AND
17187 +                           8.5 <= OrderCount  THEN DO;
17188 +          _NODE_  =                   37;
17189 +          _LEAF_  =                    8;
17190 +          P_Churntrue  =                    1;
17191 +          P_Churnfalse  =                    0;
17192 +          Q_Churntrue  =                    1;
17193 +          Q_Churnfalse  =                    0;
17194 +          V_Churntrue  =                    1;
17195 +          V_Churnfalse  =                    0;
17196 +          I_Churn  = 'TRUE' ;
17197 +          U_Churn  = 'true' ;
17198 +          END;
17199 +        ELSE DO;
17200 +          _NODE_  =                   36;
17201 +          _LEAF_  =                    7;
17202 +          P_Churntrue  =     0.23509933774834;
17203 +          P_Churnfalse  =     0.76490066225165;
17204 +          Q_Churntrue  =     0.23509933774834;
17205 +          Q_Churnfalse  =     0.76490066225165;
17206 +          V_Churntrue  =     0.26612903225806;
17207 +          V_Churnfalse  =     0.73387096774193;
17208 +          I_Churn  = 'FALSE' ;
17209 +          U_Churn  = 'false' ;
17210 +          END;
17211 +        END;
17212 +      END;
17213 +    END;
17214 +  END;
17215 +ELSE DO;
17216 +  _ARBFMT_5 = PUT( Complain , $5.);
17217 +   %DMNORMIP( _ARBFMT_5);
17218 +  IF _ARBFMT_5 IN ('TRUE' ) THEN DO;
17219 +    _ARBFMT_18 = PUT( PreferedOrderCat , $18.);
17220 +     %DMNORMIP( _ARBFMT_18);
17221 +    IF _ARBFMT_18 IN ('MOBILE' ,'MOBILE PHONE' ) THEN DO;
17222 +      _ARBFMT_12 = PUT( PreferredLoginDevice , $12.);
17223 +       %DMNORMIP( _ARBFMT_12);
17224 +      IF _ARBFMT_12 IN ('COMPUTER' ) THEN DO;
17225 +        _ARBFMT_6 = PUT( Gender , $6.);
17226 +         %DMNORMIP( _ARBFMT_6);
17227 +        IF _ARBFMT_6 IN ('FEMALE' ) THEN DO;
17228 +          _NODE_  =                   45;
17229 +          _LEAF_  =                   18;
17230 +          P_Churntrue  =     0.89473684210526;
17231 +          P_Churnfalse  =     0.10526315789473;
17232 +          Q_Churntrue  =     0.89473684210526;
17233 +          Q_Churnfalse  =     0.10526315789473;
17234 +          V_Churntrue  =                    1;
17235 +          V_Churnfalse  =                    0;
17236 +          I_Churn  = 'TRUE' ;
17237 +          U_Churn  = 'true' ;
17238 +          END;
17239 +        ELSE DO;
17240 +          _ARBFMT_11 = PUT( PreferredPaymentMode , $11.);
17241 +           %DMNORMIP( _ARBFMT_11);
17242 +          IF _ARBFMT_11 IN ('COD' ) THEN DO;
17243 +            _NODE_  =                   66;
17244 +            _LEAF_  =                   16;
17245 +            P_Churntrue  =                    1;
17246 +            P_Churnfalse  =                    0;
17247 +            Q_Churntrue  =                    1;
17248 +            Q_Churnfalse  =                    0;
17249 +            V_Churntrue  =                    1;
17250 +            V_Churnfalse  =                    0;
17251 +            I_Churn  = 'TRUE' ;
17252 +            U_Churn  = 'true' ;
17253 +            END;
17254 +          ELSE DO;
17255 +            _NODE_  =                   67;
17256 +            _LEAF_  =                   17;
17257 +            P_Churntrue  =     0.32608695652173;
17258 +            P_Churnfalse  =     0.67391304347826;
17259 +            Q_Churntrue  =     0.32608695652173;
17260 +            Q_Churnfalse  =     0.67391304347826;
17261 +            V_Churntrue  =     0.33333333333333;
17262 +            V_Churnfalse  =     0.66666666666666;
17263 +            I_Churn  = 'FALSE' ;
17264 +            U_Churn  = 'false' ;
17265 +            END;
17266 +          END;
17267 +        END;
17268 +      ELSE DO;
17269 +        _ARBFMT_11 = PUT( PreferredPaymentMode , $11.);
17270 +         %DMNORMIP( _ARBFMT_11);
17271 +        IF _ARBFMT_11 IN ('E WALLET' ) THEN DO;
17272 +          _NODE_  =                   43;
17273 +          _LEAF_  =                   15;
17274 +          P_Churntrue  =                    1;
17275 +          P_Churnfalse  =                    0;
17276 +          Q_Churntrue  =                    1;
17277 +          Q_Churnfalse  =                    0;
17278 +          V_Churntrue  =                    1;
17279 +          V_Churnfalse  =                    0;
17280 +          I_Churn  = 'TRUE' ;
17281 +          U_Churn  = 'true' ;
17282 +          END;
17283 +        ELSE DO;
17284 +          _NODE_  =                   42;
17285 +          _LEAF_  =                   14;
17286 +          P_Churntrue  =     0.18987341772151;
17287 +          P_Churnfalse  =     0.81012658227848;
17288 +          Q_Churntrue  =     0.18987341772151;
17289 +          Q_Churnfalse  =     0.81012658227848;
17290 +          V_Churntrue  =     0.29230769230769;
17291 +          V_Churnfalse  =      0.7076923076923;
17292 +          I_Churn  = 'FALSE' ;
17293 +          U_Churn  = 'false' ;
17294 +          END;
17295 +        END;
17296 +      END;
17297 +    ELSE DO;
17298 +      _NODE_  =                   13;
17299 +      _LEAF_  =                   19;
17300 +      P_Churntrue  =     0.09615384615384;
17301 +      P_Churnfalse  =     0.90384615384615;
17302 +      Q_Churntrue  =     0.09615384615384;
17303 +      Q_Churnfalse  =     0.90384615384615;
17304 +      V_Churntrue  =     0.08712121212121;
17305 +      V_Churnfalse  =     0.91287878787878;
17306 +      I_Churn  = 'FALSE' ;
17307 +      U_Churn  = 'false' ;
17308 +      END;
17309 +    END;
17310 +  ELSE DO;
17311 +    _NODE_  =                    7;
17312 +    _LEAF_  =                   20;
17313 +    P_Churntrue  =     0.04730617608409;
17314 +    P_Churnfalse  =      0.9526938239159;
17315 +    Q_Churntrue  =     0.04730617608409;
17316 +    Q_Churnfalse  =      0.9526938239159;
17317 +    V_Churntrue  =     0.03632694248234;
17318 +    V_Churnfalse  =     0.96367305751765;
17319 +    I_Churn  = 'FALSE' ;
17320 +    U_Churn  = 'false' ;
17321 +    END;
17322 +  END;
17323 +
17324 +*****  RESIDUALS R_ *************;
17325 +IF  F_Churn  NE 'TRUE'
17326 +AND F_Churn  NE 'FALSE'  THEN DO;
17327 +        R_Churntrue  = .;
17328 +        R_Churnfalse  = .;
17329 + END;
17330 + ELSE DO;
17331 +       R_Churntrue  =  -P_Churntrue ;
17332 +       R_Churnfalse  =  -P_Churnfalse ;
17333 +       SELECT( F_Churn  );
17334 +          WHEN( 'TRUE'  ) R_Churntrue  = R_Churntrue  +1;
17335 +          WHEN( 'FALSE'  ) R_Churnfalse  = R_Churnfalse  +1;
17336 +       END;
17337 + END;
17338 +
17339 +****************************************************************;
17340 +******          END OF DECISION TREE SCORING CODE         ******;
17341 +****************************************************************;
17342 +
17343 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17344  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
17345  quit;
17346  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17347  filename emflow "D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas";
17348  *------------------------------------------------------------*;
17349  * Tree: Scoring VALIDATE data;
17350  *------------------------------------------------------------*;
17351  data EMWS2.Tree_VALIDATE
17352  / view=EMWS2.Tree_VALIDATE
17353  ;
17354  set EMWS2.Part_VALIDATE
17355  ;
17356  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Study\WQD7005 Data Mining\_final\AA1\WQD7005_AA1_Analysis\Workspaces\EMWS2\Tree\EMFLOWSCORE.sas.
17357 +****************************************************************;
17358 +******             DECISION TREE SCORING CODE             ******;
17359 +****************************************************************;
17360 +
17361 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17362 +LENGTH F_Churn  $    5;
17363 +LENGTH I_Churn  $    5;
17364 +LENGTH U_Churn  $    5;
17365 +LENGTH _WARN_  $    4;
17366 +
17367 +******              LABELS FOR NEW VARIABLES              ******;
17368 +label _NODE_ = 'Node' ;
17369 +label _LEAF_ = 'Leaf' ;
17370 +label P_Churntrue = 'Predicted: Churn=true' ;
17371 +label P_Churnfalse = 'Predicted: Churn=false' ;
17372 +label Q_Churntrue = 'Unadjusted P: Churn=true' ;
17373 +label Q_Churnfalse = 'Unadjusted P: Churn=false' ;
17374 +label V_Churntrue = 'Validated: Churn=true' ;
17375 +label V_Churnfalse = 'Validated: Churn=false' ;
17376 +label R_Churntrue = 'Residual: Churn=true' ;
17377 +label R_Churnfalse = 'Residual: Churn=false' ;
17378 +label F_Churn = 'From: Churn' ;
17379 +label I_Churn = 'Into: Churn' ;
17380 +label U_Churn = 'Unnormalized Into: Churn' ;
17381 +label _WARN_ = 'Warnings' ;
17382 +
17383 +
17384 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17385 +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
17386 +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
17387 +LENGTH _ARBFMT_11 $     11; DROP _ARBFMT_11;
17388 +_ARBFMT_11 = ' '; /* Initialize to avoid warning. */
17389 +LENGTH _ARBFMT_18 $     18; DROP _ARBFMT_18;
17390 +_ARBFMT_18 = ' '; /* Initialize to avoid warning. */
17391 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17392 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17393 +LENGTH _ARBFMT_8 $      8; DROP _ARBFMT_8;
17394 +_ARBFMT_8 = ' '; /* Initialize to avoid warning. */
17395 +LENGTH _ARBFMT_6 $      6; DROP _ARBFMT_6;
17396 +_ARBFMT_6 = ' '; /* Initialize to avoid warning. */
17397 +
17398 +
17399 +_ARBFMT_5 = PUT( Churn , $5.);
17400 + %DMNORMCP( _ARBFMT_5, F_Churn );
17401 +
17402 +******             ASSIGN OBSERVATION TO NODE             ******;
17403 +IF  NOT MISSING(Tenure ) AND
17404 +  Tenure  <                  1.5 THEN DO;
17405 +  _ARBFMT_5 = PUT( Complain , $5.);
17406 +   %DMNORMIP( _ARBFMT_5);
17407 +  IF _ARBFMT_5 IN ('TRUE' ) THEN DO;
17408 +    IF  NOT MISSING(DaySinceLastOrder ) AND
17409 +      DaySinceLastOrder  <                  1.5 THEN DO;
17410 +      _ARBFMT_8 = PUT( MaritalStatus , $8.);
17411 +       %DMNORMIP( _ARBFMT_8);
17412 +      IF _ARBFMT_8 IN ('MARRIED' ) THEN DO;
17413 +        IF  NOT MISSING(SatisfactionScore ) AND
17414 +          SatisfactionScore  <                  3.5 THEN DO;
17415 +          IF  NOT MISSING(OrderAmountHikeFromlastYear ) AND
17416 +            OrderAmountHikeFromlastYear  <                 12.5 THEN DO;
17417 +            _NODE_  =                   62;
17418 +            _LEAF_  =                    9;
17419 +            P_Churntrue  =                    1;
17420 +            P_Churnfalse  =                    0;
17421 +            Q_Churntrue  =                    1;
17422 +            Q_Churnfalse  =                    0;
17423 +            V_Churntrue  =                    1;
17424 +            V_Churnfalse  =                    0;
17425 +            I_Churn  = 'TRUE' ;
17426 +            U_Churn  = 'true' ;
17427 +            END;
17428 +          ELSE DO;
17429 +            _NODE_  =                   63;
17430 +            _LEAF_  =                   10;
17431 +            P_Churntrue  =     0.22222222222222;
17432 +            P_Churnfalse  =     0.77777777777777;
17433 +            Q_Churntrue  =     0.22222222222222;
17434 +            Q_Churnfalse  =     0.77777777777777;
17435 +            V_Churntrue  =                  0.4;
17436 +            V_Churnfalse  =                  0.6;
17437 +            I_Churn  = 'FALSE' ;
17438 +            U_Churn  = 'false' ;
17439 +            END;
17440 +          END;
17441 +        ELSE DO;
17442 +          _NODE_  =                   39;
17443 +          _LEAF_  =                   11;
17444 +          P_Churntrue  =     0.94736842105263;
17445 +          P_Churnfalse  =     0.05263157894736;
17446 +          Q_Churntrue  =     0.94736842105263;
17447 +          Q_Churnfalse  =     0.05263157894736;
17448 +          V_Churntrue  =                    1;
17449 +          V_Churnfalse  =                    0;
17450 +          I_Churn  = 'TRUE' ;
17451 +          U_Churn  = 'true' ;
17452 +          END;
17453 +        END;
17454 +      ELSE DO;
17455 +        _NODE_  =                   21;
17456 +        _LEAF_  =                   12;
17457 +        P_Churntrue  =     0.96078431372549;
17458 +        P_Churnfalse  =      0.0392156862745;
17459 +        Q_Churntrue  =     0.96078431372549;
17460 +        Q_Churnfalse  =      0.0392156862745;
17461 +        V_Churntrue  =     0.95833333333333;
17462 +        V_Churnfalse  =     0.04166666666666;
17463 +        I_Churn  = 'TRUE' ;
17464 +        U_Churn  = 'true' ;
17465 +        END;
17466 +      END;
17467 +    ELSE DO;
17468 +      _NODE_  =                   11;
17469 +      _LEAF_  =                   13;
17470 +      P_Churntrue  =     0.62068965517241;
17471 +      P_Churnfalse  =     0.37931034482758;
17472 +      Q_Churntrue  =     0.62068965517241;
17473 +      Q_Churnfalse  =     0.37931034482758;
17474 +      V_Churntrue  =     0.79787234042553;
17475 +      V_Churnfalse  =     0.20212765957446;
17476 +      I_Churn  = 'TRUE' ;
17477 +      U_Churn  = 'true' ;
17478 +      END;
17479 +    END;
17480 +  ELSE DO;
17481 +    _ARBFMT_11 = PUT( PreferredPaymentMode , $11.);
17482 +     %DMNORMIP( _ARBFMT_11);
17483 +    IF _ARBFMT_11 IN ('COD' ,'E WALLET' ) THEN DO;
17484 +      _ARBFMT_8 = PUT( MaritalStatus , $8.);
17485 +       %DMNORMIP( _ARBFMT_8);
17486 +      IF _ARBFMT_8 IN ('DIVORCED' ,'MARRIED' ) THEN DO;
17487 +        _ARBFMT_18 = PUT( PreferedOrderCat , $18.);
17488 +         %DMNORMIP( _ARBFMT_18);
17489 +        IF _ARBFMT_18 IN ('LAPTOP & ACCESSORY' ) THEN DO;
17490 +          _NODE_  =                   33;
17491 +          _LEAF_  =                    3;
17492 +          P_Churntrue  =                    0;
17493 +          P_Churnfalse  =                    1;
17494 +          Q_Churntrue  =                    0;
17495 +          Q_Churnfalse  =                    1;
17496 +          V_Churntrue  =                    0;
17497 +          V_Churnfalse  =                    1;
17498 +          I_Churn  = 'FALSE' ;
17499 +          U_Churn  = 'false' ;
17500 +          END;
17501 +        ELSE DO;
17502 +          IF  NOT MISSING(CityTier ) AND
17503 +            CityTier  <                  1.5 THEN DO;
17504 +            _NODE_  =                   56;
17505 +            _LEAF_  =                    1;
17506 +            P_Churntrue  =     0.31578947368421;
17507 +            P_Churnfalse  =     0.68421052631578;
17508 +            Q_Churntrue  =     0.31578947368421;
17509 +            Q_Churnfalse  =     0.68421052631578;
17510 +            V_Churntrue  =                  0.4;
17511 +            V_Churnfalse  =                  0.6;
17512 +            I_Churn  = 'FALSE' ;
17513 +            U_Churn  = 'false' ;
17514 +            END;
17515 +          ELSE DO;
17516 +            _NODE_  =                   57;
17517 +            _LEAF_  =                    2;
17518 +            P_Churntrue  =                 0.85;
17519 +            P_Churnfalse  =                 0.15;
17520 +            Q_Churntrue  =                 0.85;
17521 +            Q_Churnfalse  =                 0.15;
17522 +            V_Churntrue  =                  0.9;
17523 +            V_Churnfalse  =                  0.1;
17524 +            I_Churn  = 'TRUE' ;
17525 +            U_Churn  = 'true' ;
17526 +            END;
17527 +          END;
17528 +        END;
17529 +      ELSE DO;
17530 +        IF  NOT MISSING(SatisfactionScore ) AND
17531 +          SatisfactionScore  <                  1.5 THEN DO;
17532 +          _NODE_  =                   34;
17533 +          _LEAF_  =                    4;
17534 +          P_Churntrue  =     0.28571428571428;
17535 +          P_Churnfalse  =     0.71428571428571;
17536 +          Q_Churntrue  =     0.28571428571428;
17537 +          Q_Churnfalse  =     0.71428571428571;
17538 +          V_Churntrue  =                    0;
17539 +          V_Churnfalse  =                    1;
17540 +          I_Churn  = 'FALSE' ;
17541 +          U_Churn  = 'false' ;
17542 +          END;
17543 +        ELSE DO;
17544 +          _NODE_  =                   35;
17545 +          _LEAF_  =                    5;
17546 +          P_Churntrue  =     0.92857142857142;
17547 +          P_Churnfalse  =     0.07142857142857;
17548 +          Q_Churntrue  =     0.92857142857142;
17549 +          Q_Churnfalse  =     0.07142857142857;
17550 +          V_Churntrue  =                 0.85;
17551 +          V_Churnfalse  =                 0.15;
17552 +          I_Churn  = 'TRUE' ;
17553 +          U_Churn  = 'true' ;
17554 +          END;
17555 +        END;
17556 +      END;
17557 +    ELSE DO;
17558 +      IF  NOT MISSING(DaySinceLastOrder ) AND
17559 +        DaySinceLastOrder  <                  1.5 THEN DO;
17560 +        _NODE_  =                   18;
17561 +        _LEAF_  =                    6;
17562 +        P_Churntrue  =                  0.5;
17563 +        P_Churnfalse  =                  0.5;
17564 +        Q_Churntrue  =                  0.5;
17565 +        Q_Churnfalse  =                  0.5;
17566 +        V_Churntrue  =                 0.54;
17567 +        V_Churnfalse  =                 0.46;
17568 +        I_Churn  = 'TRUE' ;
17569 +        U_Churn  = 'true' ;
17570 +        END;
17571 +      ELSE DO;
17572 +        IF  NOT MISSING(OrderCount ) AND
17573 +                           8.5 <= OrderCount  THEN DO;
17574 +          _NODE_  =                   37;
17575 +          _LEAF_  =                    8;
17576 +          P_Churntrue  =                    1;
17577 +          P_Churnfalse  =                    0;
17578 +          Q_Churntrue  =                    1;
17579 +          Q_Churnfalse  =                    0;
17580 +          V_Churntrue  =                    1;
17581 +          V_Churnfalse  =                    0;
17582 +          I_Churn  = 'TRUE' ;
17583 +          U_Churn  = 'true' ;
17584 +          END;
17585 +        ELSE DO;
17586 +          _NODE_  =                   36;
17587 +          _LEAF_  =                    7;
17588 +          P_Churntrue  =     0.23509933774834;
17589 +          P_Churnfalse  =     0.76490066225165;
17590 +          Q_Churntrue  =     0.23509933774834;
17591 +          Q_Churnfalse  =     0.76490066225165;
17592 +          V_Churntrue  =     0.26612903225806;
17593 +          V_Churnfalse  =     0.73387096774193;
17594 +          I_Churn  = 'FALSE' ;
17595 +          U_Churn  = 'false' ;
17596 +          END;
17597 +        END;
17598 +      END;
17599 +    END;
17600 +  END;
17601 +ELSE DO;
17602 +  _ARBFMT_5 = PUT( Complain , $5.);
17603 +   %DMNORMIP( _ARBFMT_5);
17604 +  IF _ARBFMT_5 IN ('TRUE' ) THEN DO;
17605 +    _ARBFMT_18 = PUT( PreferedOrderCat , $18.);
17606 +     %DMNORMIP( _ARBFMT_18);
17607 +    IF _ARBFMT_18 IN ('MOBILE' ,'MOBILE PHONE' ) THEN DO;
17608 +      _ARBFMT_12 = PUT( PreferredLoginDevice , $12.);
17609 +       %DMNORMIP( _ARBFMT_12);
17610 +      IF _ARBFMT_12 IN ('COMPUTER' ) THEN DO;
17611 +        _ARBFMT_6 = PUT( Gender , $6.);
17612 +         %DMNORMIP( _ARBFMT_6);
17613 +        IF _ARBFMT_6 IN ('FEMALE' ) THEN DO;
17614 +          _NODE_  =                   45;
17615 +          _LEAF_  =                   18;
17616 +          P_Churntrue  =     0.89473684210526;
17617 +          P_Churnfalse  =     0.10526315789473;
17618 +          Q_Churntrue  =     0.89473684210526;
17619 +          Q_Churnfalse  =     0.10526315789473;
17620 +          V_Churntrue  =                    1;
17621 +          V_Churnfalse  =                    0;
17622 +          I_Churn  = 'TRUE' ;
17623 +          U_Churn  = 'true' ;
17624 +          END;
17625 +        ELSE DO;
17626 +          _ARBFMT_11 = PUT( PreferredPaymentMode , $11.);
17627 +           %DMNORMIP( _ARBFMT_11);
17628 +          IF _ARBFMT_11 IN ('COD' ) THEN DO;
17629 +            _NODE_  =                   66;
17630 +            _LEAF_  =                   16;
17631 +            P_Churntrue  =                    1;
17632 +            P_Churnfalse  =                    0;
17633 +            Q_Churntrue  =                    1;
17634 +            Q_Churnfalse  =                    0;
17635 +            V_Churntrue  =                    1;
17636 +            V_Churnfalse  =                    0;
17637 +            I_Churn  = 'TRUE' ;
17638 +            U_Churn  = 'true' ;
17639 +            END;
17640 +          ELSE DO;
17641 +            _NODE_  =                   67;
17642 +            _LEAF_  =                   17;
17643 +            P_Churntrue  =     0.32608695652173;
17644 +            P_Churnfalse  =     0.67391304347826;
17645 +            Q_Churntrue  =     0.32608695652173;
17646 +            Q_Churnfalse  =     0.67391304347826;
17647 +            V_Churntrue  =     0.33333333333333;
17648 +            V_Churnfalse  =     0.66666666666666;
17649 +            I_Churn  = 'FALSE' ;
17650 +            U_Churn  = 'false' ;
17651 +            END;
17652 +          END;
17653 +        END;
17654 +      ELSE DO;
17655 +        _ARBFMT_11 = PUT( PreferredPaymentMode , $11.);
17656 +         %DMNORMIP( _ARBFMT_11);
17657 +        IF _ARBFMT_11 IN ('E WALLET' ) THEN DO;
17658 +          _NODE_  =                   43;
17659 +          _LEAF_  =                   15;
17660 +          P_Churntrue  =                    1;
17661 +          P_Churnfalse  =                    0;
17662 +          Q_Churntrue  =                    1;
17663 +          Q_Churnfalse  =                    0;
17664 +          V_Churntrue  =                    1;
17665 +          V_Churnfalse  =                    0;
17666 +          I_Churn  = 'TRUE' ;
17667 +          U_Churn  = 'true' ;
17668 +          END;
17669 +        ELSE DO;
17670 +          _NODE_  =                   42;
17671 +          _LEAF_  =                   14;
17672 +          P_Churntrue  =     0.18987341772151;
17673 +          P_Churnfalse  =     0.81012658227848;
17674 +          Q_Churntrue  =     0.18987341772151;
17675 +          Q_Churnfalse  =     0.81012658227848;
17676 +          V_Churntrue  =     0.29230769230769;
17677 +          V_Churnfalse  =      0.7076923076923;
17678 +          I_Churn  = 'FALSE' ;
17679 +          U_Churn  = 'false' ;
17680 +          END;
17681 +        END;
17682 +      END;
17683 +    ELSE DO;
17684 +      _NODE_  =                   13;
17685 +      _LEAF_  =                   19;
17686 +      P_Churntrue  =     0.09615384615384;
17687 +      P_Churnfalse  =     0.90384615384615;
17688 +      Q_Churntrue  =     0.09615384615384;
17689 +      Q_Churnfalse  =     0.90384615384615;
17690 +      V_Churntrue  =     0.08712121212121;
17691 +      V_Churnfalse  =     0.91287878787878;
17692 +      I_Churn  = 'FALSE' ;
17693 +      U_Churn  = 'false' ;
17694 +      END;
17695 +    END;
17696 +  ELSE DO;
17697 +    _NODE_  =                    7;
17698 +    _LEAF_  =                   20;
17699 +    P_Churntrue  =     0.04730617608409;
17700 +    P_Churnfalse  =      0.9526938239159;
17701 +    Q_Churntrue  =     0.04730617608409;
17702 +    Q_Churnfalse  =      0.9526938239159;
17703 +    V_Churntrue  =     0.03632694248234;
17704 +    V_Churnfalse  =     0.96367305751765;
17705 +    I_Churn  = 'FALSE' ;
17706 +    U_Churn  = 'false' ;
17707 +    END;
17708 +  END;
17709 +
17710 +*****  RESIDUALS R_ *************;
17711 +IF  F_Churn  NE 'TRUE'
17712 +AND F_Churn  NE 'FALSE'  THEN DO;
17713 +        R_Churntrue  = .;
17714 +        R_Churnfalse  = .;
17715 + END;
17716 + ELSE DO;
17717 +       R_Churntrue  =  -P_Churntrue ;
17718 +       R_Churnfalse  =  -P_Churnfalse ;
17719 +       SELECT( F_Churn  );
17720 +          WHEN( 'TRUE'  ) R_Churntrue  = R_Churntrue  +1;
17721 +          WHEN( 'FALSE'  ) R_Churnfalse  = R_Churnfalse  +1;
17722 +       END;
17723 + END;
17724 +
17725 +****************************************************************;
17726 +******          END OF DECISION TREE SCORING CODE         ******;
17727 +****************************************************************;
17728 +
17729 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17730  run;
 
NOTE: DATA STEP view saved on file EMWS2.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17731  quit;
17732  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
17734  proc sort data=WORK.EM_USER_REPORT;
17735  by ID VIEW;
17736  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17737  *------------------------------------------------------------*;
17738  * Tree: Computing metadata for TRAIN data;
17739  *------------------------------------------------------------*;
 
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
18105  data WORK.MODELTEMP_INFO;
18106  set EMWS2.Tree_EMINFO;
18107  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18108  run;
 
NOTE: There were 0 observations read from the data set EMWS2.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18109  data EMWS2.Tree_EMINFO;
18110  length TARGET KEY $32 DATA $43;
18111  input TARGET KEY DATA $;
18112  cards;
 
NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18116  run;
18117  data EMWS2.Tree_EMINFO;
18118  set EMWS2.Tree_EMINFO WORK.MODELTEMP_INFO;
18119  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18120  proc sort data = EMWS2.Tree_EMINFO NOTHREADS;
18121  by TARGET KEY;
18122  run;
 
NOTE: There were 3 observations read from the data set EMWS2.TREE_EMINFO.
NOTE: The data set EMWS2.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
NOTE: View EMWS2.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                January 07, 2024
Time:                01:49:53
*------------------------------------------------------------*
18146  data EMWS2.Tree_EMOUTFIT;
18147  set EMWS2.Tree_EMOUTFIT;
18148  length TargetLabel $200;
18149  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18150  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS2.TREE_EMOUTFIT.
NOTE: The data set EMWS2.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18151  proc sort data=EMWS2.Tree_EMREPORTFIT nothreads;
18152  by TARGET;
18153  run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE_EMREPORTFIT.
NOTE: The data set EMWS2.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18154  %let _EMwarndup = 0;
18155  %let _EMtargetdup =;
18156  %let _EMASEtargetdup =;
18157  data _null_;
18158  set EMWS2.Tree_EMOUTFIT;
18159  if .<_ASE_<0.000001 then do;
18160  call symput('_EMwarndup', '1');
18161  call symput('_EMtargetdup', target);
18162  call symput('_EMASEtargetdup', put(_ASE_, best.));
18163  end;
18164  run;
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18165  %let EMEXCEPTIONSTRING=;
18166  *------------------------------------------------------------*;
18167  * REPORT: Tree;
18168  *------------------------------------------------------------*;
18169  %let EM_ACTION = REPORT;
18170  %let syscc = 0;
18171  %macro main;
18172
18173    %if %upcase(&EM_ACTION) = CREATE %then %do;
18174      filename temp catalog 'sashelp.emmodl.tree_create.source';
18175      %include temp;
18176      filename temp;
18177
18178      %em_tree_create;
18179    %end;
18180
18181     %else
18182     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18183
18184         filename temp catalog 'sashelp.emmodl.tree_train.source';
18185         %include temp;
18186         filename temp;
18187         %em_tree_train;
18188     %end;
18189
18190    %else
18191    %if %upcase(&EM_ACTION) = SCORE %then %do;
18192      filename temp catalog 'sashelp.emmodl.tree_score.source';
18193      %include temp;
18194      filename temp;
18195
18196      %em_tree_score;
18197
18198    %end;
18199
18200    %else
18201    %if %upcase(&EM_ACTION) = REPORT %then %do;
18202
18203         filename temp catalog 'sashelp.emmodl.tree_report.source';
18204         %include temp;
18205         filename temp;
18206
18207         %em_tree_report;
18208     %end;
18209
18210    %else
18211    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18212
18213         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18214         %include temp;
18215         filename temp;
18216         %EM_TREE_OPENTREEVIEWER;
18217
18218     %end;
18219
18220    %else
18221    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18222
18223         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18224         %include temp;
18225         filename temp;
18226         %EM_TREE_CLOSETREEVIEWER;
18227
18228     %end;
18229
18230
18231     %doendm:
18232  %mend main;
18233
18234  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18236 +%macro em_tree_makePlotDs( multipleTar= );
18238 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18239 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18240 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18241 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18243 +  /* determine if validation statistics will be displayed */
18244 +  %let validflag=N;
18245 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18246 +    /* determine if validation data exists */
18247 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18248 +      %let validflag=Y;
18249 +    %end;
18250 +  %end;
18252 +   /* retrieve name of decmeta even in presence of multiple targets */
18253 +   %let decmeta = ;
18254 +   %if &EM_DEC_DECMETA eq %then %do;
18255 +     data _Target;
18256 +       set &em_data_variableset;
18257 +       where ROLE='TARGET' and USE in('D', 'Y');
18258 +       keep NAME;
18259 +     run;
18260 +     proc sort data=_Target;
18261 +       by NAME;
18262 +     run;
18263 +     proc sort data=EM_TARGETDECINFO;
18264 +       by TARGET;
18265 +     run;
18266 +     data _Target;
18267 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18268 +       by NAME;
18269 +       if _a then do;
18270 +         call symput('decmeta', trim(DECMETA));
18271 +       end;
18272 +     run;
18273 +     proc delete data=_Target;run;
18274 +   %end;
18275 +   %else %let decmeta = &EM_DEC_DECMETA;
18278 +  /* retrieve targetEvent from decmeta */
18279 +  %let targetEvent=;
18280 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18281 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18282 +      data _null_;
18283 +       set &DECMETA(where=(_TYPE_="TARGET"));
18284 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18285 +      run;
18286 +    %end;
18287 +  %end;
18289 +  /* retrieve predicted var for targetEvent from decmeta */
18290 +  %let predTarget=;
18291 +  %let predLvl=;
18292 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18293 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18294 +      data _null_;
18295 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18296 +       call symput('predTarget', strip(VARIABLE));
18297 +       call symput('predLvl', strip(LEVEL));
18298 +      run;
18299 +    %end;
18300 +  %end;
18301 +  %else %do;
18302 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18303 +      data _null_;
18304 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18305 +       call symput('predTarget', strip(VARIABLE));
18306 +      run;
18307 +    %end;
18308 +  %end;
18310 +  /* create BelowText value */
18311 +  data belowtext;
18312 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18313 +    keep node belowtext;
18314 +  run;
18316 +  /* relace belowtext with variable label if it exists */
18317 +  data belowtext2;
18318 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18319 +    keep node belowtextlbl;
18320 +  run;
18322 +  proc sort data=belowtext; by node; run;
18323 +  proc sort data=belowtext2; by node; run;
18325 +  data belowtext;
18326 +    merge belowtext belowtext2(in=_a);
18327 +    by node;
18328 +    if _a then belowtext=belowtextlbl;
18329 +    keep node belowtext;
18330 +  run;
18332 +  /* create AboveText value */
18333 +  data abovetext;
18334 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18335 +  run;
18336 +  proc sort data=abovetext; by node numeric_value; run;
18338 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18339 +  data abovetext;
18340 +    set abovetext(rename=(node=parent));
18341 +    by parent numeric_value;
18342 +    retain abovetext tempstring flag branch origval origchar ;
18343 +    length abovetext $256;
18344 +    length tempstring origchar $64;
18346 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18347 +      if first.parent then do;
18348 +        if missing(character_value) then do;
18349 +          numeric_value = round(numeric_value, &sp_precision);
18350 +          abovetext = "< "||strip(NUMERIC_VALUE);
18351 +          branch = 1;
18352 +          origval = numeric_value;
18353 +          output;
18354 +        end;
18355 +        else do;
18356 +          abovetext = "< "||strip(CHARACTER_VALUE);
18357 +          branch = 1;
18358 +          origchar = character_value;
18359 +          output;
18360 +        end;
18362 +        if first.parent AND last.parent then do;
18363 +          if missing(character_value) then do;
18364 +            numeric_value = round(numeric_value, &sp_precision);
18365 +            branch = branch + 1;
18366 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18367 +            output;
18368 +          end;
18369 +          else do;
18370 +            branch = branch + 1;
18371 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18372 +            output;
18373 +          end;
18374 +        end;
18375 +      end;
18376 +      else if last.parent then do;
18377 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18378 +          if missing(character_value) then do;
18379 +            numeric_value = round(numeric_value, &sp_precision);
18380 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18381 +          end;
18382 +          else do;
18383 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18384 +          end;
18385 +          branch = branch + 1;
18386 +          output;
18388 +          if missing(character_value) then do;
18389 +            numeric_value = round(numeric_value, &sp_precision);
18390 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18391 +          end;
18392 +          else do;
18393 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18394 +          end;
18395 +          branch = branch + 1;
18396 +          output;
18397 +        end;
18398 +        else do;
18399 +          if missing(character_value) then do;
18400 +            numeric_value = round(numeric_value, &sp_precision);
18401 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18402 +          end;
18403 +          else do;
18404 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18405 +          end;
18406 +          branch = branch + 1;
18407 +          output;
18408 +        end;
18409 +      end;
18410 +      else do;
18411 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18412 +          if missing(character_value) then do;
18413 +            numeric_value = round(numeric_value,&sp_precision);
18414 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18415 +            origval = numeric_value;
18416 +          end;
18417 +          else do;
18418 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18419 +            origchar = character_value;
18420 +          end;
18421 +          branch = branch + 1;
18422 +          output;
18424 +        end;
18425 +        else do;
18426 +          if missing(character_value) then do;
18427 +            numeric_value = round(numeric_value, &sp_precision);
18428 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18429 +            origval = numeric_value;
18430 +          end;
18431 +          else do;
18432 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18433 +            origval = character_value;
18434 +          end;
18435 +          branch = branch + 1;
18436 +          output;
18437 +        end;
18438 +      end;
18439 +    end;
18440 +    else do;
18441 +       if first.numeric_value then do;
18442 +         flag = 0;
18443 +         abovetext = strip(CHARACTER_VALUE);
18444 +         branch = numeric_value;
18445 +         if first.numeric_value AND last.numeric_value then do;
18446 +           output;
18447 +         end;
18448 +       end;
18449 +       else if last.numeric_value then do;
18450 +         if flag=0 then do;
18451 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18452 +           length = length(strip(tempstring));
18453 +           if length < 32 then do;
18454 +             abovetext = strip(tempstring);
18455 +           end;
18456 +           else do;
18457 +             abovetext = strip(abovetext)||", ...";
18458 +             flag = 1;
18459 +           end;
18460 +         end;
18461 +         branch = numeric_value;
18462 +         output;
18463 +       end;
18464 +       else do;
18465 +         if flag=0 then do;
18466 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18467 +           length = length(strip(tempstring));
18468 +           if length < 32 then do;
18469 +             abovetext = strip(tempstring);
18470 +           end;
18471 +           else do;
18472 +             abovetext = strip(abovetext)||", ...";
18473 +             flag=1;
18474 +           end;
18475 +         end;
18476 +         branch = numeric_value;
18477 +       end;
18478 +    end;
18479 +    keep parent branch abovetext;
18480 +  run;
18482 +  /* MIssing value to abovetext */
18483 +  data tempmissing;
18484 +    set &EM_USER_OUTRULES;
18485 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18486 +    rename node=parent numeric_value=branch character_value=misschar;
18487 +  run;
18490 +  proc sort data=abovetext; by parent branch; run;
18491 +  proc sort data=tempmissing; by parent branch; run;
18492 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18494 +  data tempoutnodes;
18495 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18496 +    by parent branch;
18497 +    length traintotal validtotal 8;
18498 +    retain traintotal validtotal;
18500 +    if _a then do;
18501 +      if ^MISSING(abovetext) then do;
18502 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18503 +      end;
18504 +      else do;
18505 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18506 +      end;
18507 +    end;
18508 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18510 +    if node=1 then do;
18511 +      traintotal = N;
18512 +      validtotal=VN;
18513 +    end;
18515 +    drop role rank stat misschar belowtext;
18516 +  run;
18517 +  proc sort data=tempoutnodes; by node; run;
18518 +  proc sort data=belowtext; by node; run;
18520 +  data tempoutnodes;
18521 +    merge tempoutnodes belowtext;
18522 +    by node;
18524 +  run;
18526 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18527 +  %let adjusted = N;
18528 +  %let npriors = 0;
18529 +  data _null_ ;
18530 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18531 +    if eof then do ;
18532 +      call symput("npriors" , strip(put(_N_,best.))) ;
18533 +    end;
18534 +  run;
18535 +  %if &npriors gt 0 %then %let adjusted=Y;
18538 +  /* create a table with targetUsed and targetLevel columns for each node */
18539 +  data temptarmeta;
18540 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18541 +    %if &multipleTar eq N %then %do;
18542 +      AND USE in ('D', 'Y')
18543 +    %end;
18544 +    ));
18545 +    length TARGET $32;
18546 +    Target=name;
18547 +    keep target level;
18548 +  run;
18550 +  %if &multipleTar eq Y %then %do;
18551 +    data temptargetused;
18552 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18553 +      keep node target;
18554 +    run;
18555 +    proc sort data=temptargetused; by target; run;
18556 +    proc sort data=temptarmeta; by target; run;
18557 +    data temptargetused;
18558 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18559 +      by target;
18560 +      if _a and _b;
18561 +    run;
18562 +  %end;
18563 +  %else %do;
18564 +    data temptargetused;
18565 +      set &EM_USER_OUTSTATS;
18566 +      length target $32 tarlevel $10;
18567 +      target="%EM_TARGET";
18568 +      tarlevel="%EM_TARGET_LEVEL";
18569 +      keep node target tarlevel;
18570 +    run;
18571 +    proc sort data=temptargetused nodupkey; by node; run;
18572 +  %end;
18574 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18575 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18576 +  proc sort data=temptargetused; by node; run;
18579 +  /* create tables for all interval targets as well as all class targets */
18580 +  data tempinterval tempclass;
18581 +    merge tempoutstats temptargetused( rename=(target=targetused));
18582 +    by node;
18583 +    %if "&multipleTar" eq "Y" %then %do;
18584 +      if ((missing(Target)) OR (target=targetused ));
18585 +    %end;
18587 +    if tarlevel="INTERVAL" then output tempinterval;
18588 +    else output tempclass;
18589 +  run;
18591 +  /* iniitalize intTarget and classTarget flags */
18592 +  %let em_intNobs =0;
18593 +  %let em_classNobs = 0;
18594 +  %let em_intTarget= N;
18595 +  %let em_classTarget= N;
18597 +  proc sql;
18598 +    reset noprint;
18599 +    select count(*) into :em_intNobs from tempinterval;
18600 +  quit;
18601 +  proc sql;
18602 +    reset noprint;
18603 +    select count(*) into :em_classNobs from tempclass;
18604 +  quit;
18606 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18607 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18609 +  /* retrieve all information for interval targets */
18610 +  %if &em_intTarget eq Y %then %do;
18612 +    /* determine if leaf variable exists */
18613 +    %let dsid=%sysfunc(open(tempinterval,i));
18614 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18615 +    %let rc=%sysfunc(close(&dsid));
18617 +    proc transpose data=tempinterval
18618 +      %if &leafexists %then %do;
18619 +        (drop=leaf)
18620 +      %end;
18621 +      %if &validexist %then %do;
18622 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18623 +      %end;
18624 +      %else %do;
18625 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18626 +      %end;
18627 +      by node;
18628 +      id statname;
18629 +    run;
18630 +    data tempinterval;
18631 +      set tempinterval;
18632 +      if missing(N) then delete;
18633 +    run;
18634 +  %end;
18636 +  /* retrieve all information for class targets */
18637 +  %if &em_classTarget eq Y %then %do;
18638 +    proc sort data=tempclass; by node category; run;
18639 +    %if &validflag eq N %then %do;
18640 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18641 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18642 +    %end;
18643 +    %else %do;
18644 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18645 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18646 +    %end;
18647 +      set tempclass;
18649 +      %if &validflag eq N %then %do;
18650 +        %if "&adjusted" eq "N" %then %do;
18651 +          if statname="N" then output tempn;
18652 +        %end;
18653 +        %else %do;
18654 +          if statname="NPRIORS" then output tempn;
18655 +        %end;
18656 +        else if statname="PREDICTION" then output temppredict;
18657 +        else if statname="PROBABILITY" then output tempprob;
18658 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18659 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18660 +      %end;
18661 +      %else %do;
18662 +        %if "&adjusted" eq "N" %then %do;
18663 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18664 +        %end;
18665 +        %else %do;
18666 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18667 +        %end;
18668 +        else if statname="PREDICTION" then output temppredict;
18669 +        else if statname="PROBABILITY" then output tempprob;
18670 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18671 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18672 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18673 +      %end;
18674 +    run;
18677 +    /* determine if profit/loss exists in tempprofit */
18678 +    %let em_profitflag=0;
18679 +    %let em_lossflag=0;
18680 +    proc sql;
18681 +      reset noprint;
18682 +      select count(*) into :em_profitflag from tempprofit;
18683 +    quit;
18684 +    proc sql;
18685 +      reset noprint;
18686 +      select count(*) into :em_lossflag from temploss;
18687 +    quit;
18689 +    %if &validFlag eq Y %then %do;
18690 +      proc transpose data=tempn
18691 +        %if "&adjusted" eq "N" %then %do;
18692 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18693 +        %end;
18694 +        %else %do;
18695 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18696 +        %end;
18697 +        by node;
18698 +        id statname;
18699 +      run;
18700 +      %if &em_profitflag ne 0 %then %do;
18701 +        proc transpose data=tempprofit out=tempprofit;
18702 +          by node category;
18703 +          id statname ;
18704 +        run;
18705 +      %end;
18706 +      %if &em_lossflag ne 0 %then %do;
18707 +        proc transpose data=temploss out=temploss;
18708 +          by node category;
18709 +          id statname ;
18710 +        run;
18711 +      %end;
18712 +      data tempprob;
18713 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18714 +        by node
18715 +        %if &multipleTar eq Y %then %do;
18716 +          target
18717 +        %end;
18718 +        category;
18719 +      run;
18720 +    %end;
18722 +    /* store percentcorrect value */
18723 +    data temppredict;
18724 +      merge tempprob temppredict(in=_a);
18725 +      by node category;
18726 +      if _a then do;
18727 +        percentCorrect = statvalue;
18728 +        %if &validFlag eq Y %then %do;
18729 +          vpercentCorrect= vstatvalue;
18730 +        %end;
18731 +      end;
18732 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18733 +      %if &validFlag eq Y %then %do;
18734 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18735 +      %end;
18736 +      ;
18737 +      if missing(percentCorrect) then delete;
18738 +      drop target;
18739 +    run;
18741 +    /* build profittext */
18742 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18743 +      data tempprofittext(keep= node profittext profitloss);
18744 +        length profittext $800 profitloss 8.;
18745 +        retain profittext profitloss;
18747 +        merge tempprob
18748 +        %if &em_profitflag ne 0 %then %do;
18749 +          tempprofit
18750 +        %end;
18751 +        %else %if &em_lossflag ne 0 %then %do;
18752 +          temploss
18753 +        %end;
18754 +        ;
18755 +        by node category;
18757 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18758 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18759 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18760 +          %let profittype = ALL;
18761 +        %end;
18763 +        /* create the profitloss variable for nodecolor if selected */
18764 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18766 +        %if "&profittype" eq "ALL" %then %do;
18767 +          if strip(CATEGORY)="&targetEvent" then do;
18768 +            profitloss=statvalue;
18769 +          end;
18770 +          if first.node then do;
18771 +            %if &validFlag eq N %then %do;
18772 +             %if &em_profitflag ne 0 %then %do;
18773 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18774 +             %end;
18775 +             %if &em_lossflag ne 0 %then %do;
18776 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18777 +             %end;
18778 +            %end;
18779 +            %else %do;
18780 +             %if &em_profitflag ne 0 %then %do;
18781 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18781!+;
18782 +             %end;
18783 +             %if &em_lossflag ne 0 %then %do;
18784 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18785 +             %end;
18786 +            %end;
18787 +          end;
18788 +          else if last.node then do;
18789 +            %if &validFlag eq N %then %do;
18790 +             %if &em_profitflag ne 0 %then %do;
18791 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18792 +             %end;
18793 +             %if &em_lossflag ne 0 %then %do;
18794 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18795 +             %end;
18796 +             /*if CATEGORY="&targetEvent" then do;
18797 +               profitloss=statvalue;
18798 +             end;*/
18799 +            %end;
18800 +            %else %do;
18801 +             %if &em_profitflag ne 0 %then %do;
18802 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18802!+14.&EM_PROPERTY_SPLITPRECISION);
18803 +                if CATEGORY="&targetEvent" then do;
18804 +                 profitloss=ALTERNATIVE_PROFIT;
18805 +                end;
18806 +             %end;
18807 +             %if &em_lossflag ne 0 %then %do;
18808 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18808!+14.&EM_PROPERTY_SPLITPRECISION);
18809 +                if CATEGORY="&targetEvent" then do;
18810 +                  profitloss=ALTERNATIVE_LOSS;
18811 +                end;
18812 +             %end;
18813 +            %end;
18814 +            output;
18815 +          end;
18816 +          else do;
18817 +            %if &validFlag eq N %then %do;
18818 +             %if &em_profitflag ne 0 %then %do;
18819 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18820 +             %end;
18821 +             %if &em_lossflag ne 0 %then %do;
18822 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18823 +             %end;
18824 +            %end;
18825 +            %else %do;
18826 +             %if &em_profitflag ne 0 %then %do;
18827 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18827!+14.&EM_PROPERTY_SPLITPRECISION);
18828 +             %end;
18829 +             %if &em_lossflag ne 0 %then %do;
18830 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18830!+14.&EM_PROPERTY_SPLITPRECISION);
18831 +             %end;
18832 +            %end;
18833 +          end;
18834 +        %end;
18835 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18836 +          if strip(CATEGORY) = "&targetevent" then do;
18837 +            %if &validFlag eq N %then %do;
18838 +             %if &em_profitflag ne 0 %then %do;
18839 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18840 +             %end;
18841 +             %if &em_lossflag ne 0 %then %do;
18842 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18843 +             %end;
18844 +             profitloss=statvalue;
18845 +            %end;
18846 +            %else %do;
18847 +             %if &em_profitflag ne 0 %then %do;
18848 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18848!+;
18849 +                profitloss=ALTERNATIVE_PROFIT;
18850 +             %end;
18851 +             %if &em_lossflag ne 0 %then %do;
18852 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18853 +                profitloss=ALTERNATIVE_LOSS;
18854 +             %end;
18855 +            %end;
18856 +            output;
18857 +          end;
18858 +        %end;
18859 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18860 +          if strip(CATEGORY) = "&targetevent" then do;
18861 +            %if &validFlag eq N %then %do;
18862 +             profitloss=statvalue;
18863 +            %end;
18864 +            %else %do;
18865 +             %if &em_profitflag ne 0 %then %do;
18866 +                profitloss=ALTERNATIVE_PROFIT;
18867 +             %end;
18868 +             %if &em_lossflag ne 0 %then %do;
18869 +                profitloss=ALTERNATIVE_LOSS;
18870 +             %end;
18871 +            %end;
18872 +            output;
18873 +          end;
18874 +        %end;
18875 +      run;
18876 +    %end;
18878 +    data tempprob(keep= node probtext);
18879 +      length probtext $800;
18880 +      retain probtext;
18881 +      set tempprob ;
18882 +      by node;
18884 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18885 +      %let probtype = &EM_PROPERTY_TARGET;
18886 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18887 +        %let probtype = ALL;
18888 +      %end;
18890 +      %if "&probtype" eq "ALL" %then %do;
18891 +        if first.node then do;
18892 +          %if &validFlag eq N %then %do;
18893 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18894 +          %end;
18895 +          %else %do;
18896 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18897 +          %end;
18898 +        end;
18899 +        else if last.node then do;
18900 +          %if &validFlag eq N %then %do;
18901 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18902 +          %end;
18903 +          %else %do;
18904 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18905 +          %end;
18906 +          output;
18907 +        end;
18908 +        else do;
18909 +          %if &validFlag eq N %then %do;
18910 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18911 +          %end;
18912 +          %else %do;
18913 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18914 +          %end;
18915 +        end;
18916 +      %end;
18917 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18918 +        if strip(CATEGORY) = "&targetevent" then do;
18919 +          %if &validFlag eq N %then %do;
18920 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18921 +          %end;
18922 +          %else %do;
18923 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18924 +          %end;
18925 +          output;
18926 +        end;
18927 +      %end;
18928 +      %else %if "&probtype" eq "NONE" %then %do;
18929 +        if last.node then do;
18930 +          output;
18931 +        end;
18932 +      %end;
18933 +    run;
18934 +  %end;
18936 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18938 +  %let oldexists=0;
18939 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18940 +     data old_tree_plot;
18941 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18942 +        rename nodecolor=oldnodecolor;
18943 +     run;
18945 +     proc sort data=old_tree_plot;
18946 +        by node;
18947 +     run;
18949 +     %let oldexists=1;
18950 +  %end;
18952 +  data &EM_USER_TREE_PLOT;
18953 +    length textall $800;
18954 +    merge tempoutnodes temptargetused
18956 +    %if &em_intTarget eq Y %then %do;
18957 +      tempinterval
18958 +    %end;
18960 +    %if &em_classTarget eq Y %then %do;
18962 +      %if &validFlag eq N %then %do;
18963 +        tempn(rename=(statvalue=N))
18964 +      %end;
18965 +      %else %do;
18966 +        tempn
18967 +      %end;
18969 +      temppredict tempprob
18971 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18972 +        tempprofittext
18973 +      %end;
18974 +    %end;
18975 +    ;
18976 +    by node;
18978 +    /* build nodetext based on user selection */
18979 +    textall="";
18981 +    %if &em_intTarget eq Y %then %do;
18982 +    if tarlevel="INTERVAL" then do;
18983 +      /* Nodeid */
18984 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18985 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18986 +      %end;
18988 +      /* Target identifier if multiple targets are used */
18989 +      %if "&multipleTar" eq "Y" %then %do;
18990 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18991 +      %end;
18993 +      %if &validFlag eq Y %then %do;
18994 +         /* Column labels displayed in validflag eq Y only */
18995 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18996 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18996!+noquote ))";
18997 +         %end;
18999 +         /* Average values */
19000 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19001 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19002 +         %end;
19004 +         /* RASE */
19005 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19006 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19007 +         %end;
19009 +         /* Count */
19010 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19011 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19012 +         %end;
19013 +      %end;
19014 +      %else %do;
19015 +         /* Average values */
19016 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19017 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19018 +         %end;
19020 +         /* RASE */
19021 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19022 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19023 +         %end;
19025 +         /* Count */
19026 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19027 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19028 +         %end;
19029 +      %end;
19031 +      /* nodecolor */
19032 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19033 +        nodecolor=PREDICTION;
19034 +      %end;
19035 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19036 +        nodecolor=RASE;
19037 +      %end;
19038 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19039 +        nodecolor=1;
19040 +      %end;
19042 +    end;
19043 +    %end;
19044 +    %if &em_classTarget eq Y %then %do;
19045 +    if tarlevel^="INTERVAL" then  do;
19047 +      /* Nodeid */
19048 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19049 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19050 +      %end;
19051 +      /* Target identifier if multiple targets are used */
19052 +      %if "&multipleTar" eq "Y" %then %do;
19053 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19054 +      %end;
19056 +      /* Predicted values */
19057 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19058 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19059 +      %end;
19061 +      /* Column labels displayed in validflag eq Y only */
19062 +      %if "&ValidFlag" eq "Y" %then %do;
19063 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19064 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19064!+noquote ))";
19065 +        %end;
19066 +      %end;
19068 +      /* Target Values */
19069 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19070 +        textall=strip(textall)||"0A"x||strip(probtext);
19071 +      %end;
19073 +      /* include profit or loss for all target levels */
19074 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19075 +        textall=strip(textall)||"0A"x||strip(profittext);
19076 +      %end;
19078 +      %if &validFlag eq N %then %do;
19079 +        /* Percent Correct */
19080 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19081 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19082 +        %end;
19084 +         /* Count */
19085 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19086 +          %if "&adjusted" eq "N" %then %do;
19087 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19088 +          %end;
19089 +          %else %do;
19090 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19091 +          %end;
19092 +         %end;
19093 +      %end;
19094 +      %else %do;
19095 +        /* Percent Correct */
19096 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19097 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19098 +        %end;
19100 +         /* Count */
19101 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19102 +          %if "&adjusted" eq "N" %then %do;
19103 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19104 +          %end;
19105 +          %else %do;
19106 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19107 +          %end;
19108 +         %end;
19109 +      %end;
19111 +      /* nodecolor */
19112 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19113 +       %if &multipleTar ne Y %then %do;
19114 +        nodecolor=&predTarget;
19115 +       %end;
19116 +       %else %do;
19117 +         nodecolor=percentcorrect;
19118 +       %end;
19119 +      %end;
19120 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19121 +        nodecolor=percentcorrect;
19122 +      %end;
19123 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19124 +        nodecolor=1;
19125 +      %end;
19126 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19127 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19128 +          nodecolor=percentcorrect;
19129 +        %end;
19130 +        %else %do;
19131 +          nodecolor=profitloss;
19132 +        %end;
19133 +      %end;
19135 +    end;
19136 +    %end;
19137 +    %if &em_intTarget eq Y %then %do;
19138 +     drop  PREDICTION  TARGET TARLEVEL
19139 +     %if &ValidFlag eq Y %then %do;
19140 +         VPREDICTION
19141 +     %end;
19142 +     ;
19143 +    %end;
19144 +    %if &em_classTarget eq Y %then %do;
19145 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19146 +     %if &ValidFlag eq Y %then %do;
19147 +         VSTATVALUE
19148 +     %end;
19149 +     ;
19150 +    %end;
19152 +  run;
19154 +  /* add leaf index information to plotds - based on primary target only*/
19155 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19156 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19157 +      set &EM_USER_OUTSTATS;
19158 +      if ((statname="PROBABILITY"
19159 +      %if &validexist %then %do;
19160 +       or statname="VALID: PROBABILITY"
19161 +      %end;
19162 +      ) AND (CATEGORY="&TARGETEVENT")
19163 +      %if "&multipleTar" eq "Y" %then %do;
19164 +        AND (Target="%EM_TARGET")
19165 +      %end;
19166 +      );
19167 +    run;
19169 +    %if &validexist %then %do;
19170 +      proc sort data=tempprob; by node; run;
19171 +      %let vpredTarget = V%substr(&predTarget, 2);
19172 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19173 +         by node;
19174 +         id statname;
19175 +      run;
19176 +    %end;
19177 +  %end;
19178 +  %else %do;
19179 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19180 +      set &EM_USER_OUTSTATS;
19181 +      if ((statname="PREDICTION"
19182 +      %if &validexist %then %do;
19183 +       or statname="VALID: PREDICTION"
19184 +      %end;
19185 +      )
19186 +      %if "&multipleTar" eq "Y" %then %do;
19187 +        AND (Target="%EM_TARGET")
19188 +      %end;
19189 +      );
19190 +    run;
19191 +    %if &validexist %then %do;
19192 +      proc sort data=tempprob; by node; run;
19193 +      %let vpredTarget = V%substr(&predTarget, 2);
19194 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19195 +         by node;
19196 +         id statname;
19197 +      run;
19198 +    %end;
19199 +  %end;
19201 +  proc sort data=tempprob; by node; run;
19202 +  data tempoutnodes;
19203 +    merge tempoutnodes tempprob;
19204 +    by node;
19205 +  run;
19207 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19208 +  data tempnodes;
19209 +    retain traintotal validtotal;
19210 +    set tempnodes(where=(leaf ne . ));
19211 +    tprob=round(&predTarget, .01);
19212 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19213 +      percevent_train=round(tprob*100, .01);
19214 +    %end;
19215 +    %else %do;
19216 +      percevent_train=tprob;
19217 +    %end;
19219 +    perc_train=round((n/traintotal)*100, 0.01);
19220 +    /* leafwidth already has a *10 multiplier */
19221 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19223 +    %if &validexist %then %do;
19224 +      %let vpredTarget = V%substr(&predTarget,2);
19225 +      vprob=round(&vpredTarget, .01);
19226 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19227 +        percevent_valid=round(vprob*100, .01);
19228 +      %end;
19229 +      %else %do;
19230 +        percevent_valid=vprob;
19231 +      %end;
19232 +      perc_valid=round((vn/validtotal)*100, .01);
19233 +    %end;
19235 +    index=_N_;
19236 +    keep node index tprob perc_train percevent_train
19237 +    %if &validexist %then %do;
19238 +        vprob percevent_valid perc_valid
19239 +    %end;
19240 +    ;
19241 +  run;
19242 +  proc sort data=tempnodes; by node; run;
19243 +  data &EM_USER_TREE_PLOT;
19244 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19245 +    by node;
19246 +    if missing(node) then delete;
19247 +    %if &oldexists %then %do;
19248 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19249 +      drop oldnodecolor;
19250 +    %end;
19251 +    abovetext = compbl(abovetext);
19253 +    /* add variable labels */
19254 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19255 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19256 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19257 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19258 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19259 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19261 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19262 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19263 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19264 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19265 +          %end;
19266 +          %else %do;
19267 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19268 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19269 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19270 +          %end;
19271 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19273 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19274 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19275 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19276 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19277 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19278 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19279 +          %end;
19280 +          %else %do;
19281 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19282 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19283 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19284 +          %end;
19285 +    ;
19286 +  run;
19288 +  /* delete temporary tables */
19289 +  proc datasets lib=work nolist;
19290 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19291 +  run;
19293 +%mend em_tree_makePlotDs;
19297 +%macro em_tree_report;
19299 +   /* report properties */
19300 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19301 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19302 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19303 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19304 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19305 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19306 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19307 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19308 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19309 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19310 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19311 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19312 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19314 +   %let validexist=0;
19315 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19316 +     %let validexist=1;
19317 +   %end;
19319 +   /* determine if multiple targets will be processed */
19320 +   %let em_tree_multipleTargets=N;
19321 +   %let em_tree_numTarget=1;
19322 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19323 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19324 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19325 +         %let em_tree_multipleTargets=N;
19326 +      %end;
19327 +      %else %do;
19328 +        data _null_;
19329 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19330 +          if eof then
19331 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19332 +        run;
19334 +        %if &em_tree_numTarget gt 1 %then %do;
19335 +           %let em_tree_multipleTargets=Y;
19336 +        %end;
19337 +     %end;
19338 +   %end;
19340 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19342 +   /* variable importance */
19343 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19344 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19346 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19347 +     /* and the columns may not be generated                                                                                 */
19348 +     %let em_tree_cvexists=;
19349 +     %let em_tree_surrexists=.;
19350 +     data _null_;
19351 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19352 +       if eof then do ;
19353 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19354 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19355 +       end;
19356 +     run;
19358 +     data &EM_USER_OUTIMPORT;
19359 +         set &EM_USER_OUTIMPORT;
19360 +         /* format columns based on Precison value specified */
19361 +         format importance 15.&EM_PROPERTY_PRECISION
19362 +              %if &validexist %then %do;
19363 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19364 +              %end;
19365 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19366 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19367 +              %end;
19368 +         ;
19369 +     run;
19371 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19372 +     proc print data=&EM_USER_OUTIMPORT
19373 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19374 +          (where=((nrules>0) OR (nsurrogates>0)))
19375 +        %end;
19376 +        %else %do;
19377 +           (where=(nrules>0))
19378 +        %end;
19379 +        label noobs
19380 +        ;
19381 +     run;
19382 +     title10;
19384 +   %end;
19386 +   /* Sequence */
19387 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19388 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19389 +   data _null_ ;
19390 +      set &EM_USER_outseq (obs=2) end=eof ;
19391 +      if eof then do ;
19392 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19393 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19394 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19395 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19396 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19397 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19398 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19399 +      end;
19400 +    run;
19402 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19403 +      data &EM_USER_OUTSEQ;
19404 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19405 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19406 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19407 +           _XMISC_=_VMISC_
19408 +        %end;
19409 +        %if "&em_tree_aprof" ne "."  %then %do;
19410 +           _XAPROF_=_VAPROF_
19411 +           _XPROF_ = _VPROF_
19412 +        %end;
19413 +        %if "&em_tree_aloss" ne "."  %then %do;
19414 +           _XALOSS_=_VALOSS_
19415 +        %end;
19416 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19417 +           _XPASE_ = _VPASE_
19418 +           _XPMISC_ = _VPMISC_
19419 +        %end;
19421 +        ));
19422 +     %end;
19423 +     %else %do;
19424 +        set &EM_USER_OUTSEQ;
19425 +     %end;
19427 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19428 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19429 +            _MISC_   15.&EM_PROPERTY_PRECISION
19430 +         %end;
19431 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19432 +            _PASE_  15.&EM_PROPERTY_PRECISION
19433 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19434 +         %end;
19435 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19436 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19437 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19438 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19439 +            %end;
19440 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19441 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19442 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19443 +            %end;
19444 +         %end;
19445 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19446 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19447 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19448 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19449 +            %end;
19450 +         %end;
19451 +         %if "&em_tree_seq" ne "." %then %do;
19452 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19453 +         %end;
19454 +         %if "&em_tree_vseq" ne "." %then %do;
19455 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19456 +         %end;
19457 +         %if "&em_tree_aprof" ne "." %then %do;
19458 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19459 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19460 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19461 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19462 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19463 +           %end;
19464 +         %end;
19465 +         %else %if "&em_tree_aloss" ne "." %then %do;
19466 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19467 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19468 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19469 +           %end;
19470 +         %end;
19471 +      ;
19472 +    run;
19473 +   %end;
19475 +   /* Observation Based Importance */
19476 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19478 +      /* need to check for 0 obs */
19479 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19480 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19481 +      %let rc=%sysfunc(close(&dsid));
19483 +      %if &onobs %then %do;
19484 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19485 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19487 +         data &EM_USER_OUTOBSIMP;
19488 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19489 +           if _a;
19490 +           by _INPUT1_;
19491 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19492 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19493 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19494 +                   %end;
19495 +                   ;
19496 +         run;
19497 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19498 +      %end;
19499 +   %end;
19501 +  %end;
19503 +  /* create dataset to support tree diagram and icicle plot */
19504 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19505 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19507 +  /* display tree diagram */
19508 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19509 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19511 +  /* display icicle diagram */
19512 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19513 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19515 +  /* Leaf Statistics Plot */
19516 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19518 +  /* print leaf information to output window */
19519 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19521 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19522 +       by descending N;
19523 +     run;
19525 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19526 +     %local vn;
19527 +     data _null_;
19528 +       set t (obs=2) end=eof;
19529 +       if eof then do;
19530 +         call symput("vn", strip(put(vn, best.)));
19531 +       end;
19532 +     run;
19534 +     data t;
19535 +       set t;
19536 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19537 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19538 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19539 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19540 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19541 +       %end;
19542 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19543 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19544 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19545 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19546 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19547 +          %end;
19548 +       %end;
19549 +       ;
19550 +     run;
19552 +     /* determine if rase is found in t */
19553 +    %let dsid=%sysfunc(open(t,i));
19554 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19555 +    %let rc=%sysfunc(close(&dsid));
19557 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19558 +     proc print data=t noobs label;
19559 +       where tprob ne .;
19560 +       var node depth N tprob
19561 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19562 +         %if "&vn" ne "." %then %do;
19563 +           VN
19564 +         %end;
19565 +         vprob
19566 +       %end;
19567 +       %if &raseexists %then %do;
19568 +            RASE
19569 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19570 +              VRASE
19571 +            %end;
19572 +       %end;
19573 +       ;
19574 +     run;
19575 +     title10;
19576 +  %end;
19578 +  /* create plots that are done during training of node */
19579 +  /* display iterative plot, including reference line */
19580 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19581 +   /* %if &nleaves eq  %then %do; */
19582 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19583 +      data _null_;
19584 +        set &EM_USER_OUTTOPOLOGY end=eof;
19585 +        if eof then do;
19586 +          call symput('nleaves', LEAF);
19587 +        end;
19588 +      run;
19589 +   /* %end; */
19591 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19592 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19593 +  %end;
19595 +  /* display leaf statistics */
19596 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19598 +  /* stats by node if multiple targets = Y */
19599 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19600 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19601 +    data &EM_USER_OUTSTATS;
19602 +      set &EM_USER_OUTSTATS;
19604 +     * if STATNAME="TARGET" then delete;
19605 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19606 +      drop leaf;
19607 +    run;
19608 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19610 +  %end;
19611 +  %else %do;
19612 +    /* add outstats and outdescribe to spk but not results */
19613 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19614 +  %end;
19616 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set EMWS2.TREE_OUTIMPORT.
NOTE: The data set EMWS2.TREE_OUTIMPORT has 14 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS2.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS2.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set EMWS2.TREE_OUTSEQ.
NOTE: The data set EMWS2.TREE_OUTSEQ has 43 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_CHURN_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_CHURN_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='TRUE');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 19 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 19 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 19 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set EMWS2.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 44 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 44 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 44 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 38 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 495 observations read from the data set EMWS2.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 19 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 38 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 19 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS2.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 19 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 19 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 19 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS2.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS2.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 273 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 273 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 273 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 234 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 39 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 273 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 273 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 273 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 39 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 273 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 273 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 273 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 273 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 78 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 39 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 78 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 78 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 39 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPPROB.
NOTE: There were 78 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 78 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 78 observations read from the data set WORK.TEMPPROB.
NOTE: There were 39 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 39 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 39 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 39 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 39 observations read from the data set WORK.TEMPN.
NOTE: There were 39 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 39 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS2.TREE_TREE_PLOT has 39 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 273 observations read from the data set EMWS2.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 78 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 78 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 39 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 39 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 39 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 39 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 20 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 20 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS2.TREE_TREE_PLOT.
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS2.TREE_TREE_PLOT has 39 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS2.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 39 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 39 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 39 observations read from the data set EMWS2.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
19617
19618  *------------------------------------------------------------*;
19619  * End REPORT: Tree;
19620  *------------------------------------------------------------*;
 
19621  /* Reset EM Options */
19622  options formchar="|----|+|---+=|-/\<>*";
19623  options nocenter ls=256 ps=10000;
19624  goptions reset=all device=GIF NODISPLAY;
 
19625  proc sort data=WORK.EM_USER_REPORT;
19626  by ID VIEW;
19627  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19628  proc sort data=EMWS2.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19629  by NAME;
19630  run;
 
NOTE: There were 17 observations read from the data set EMWS2.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 17 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19631  proc sort data=EMWS2.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19632  by NAME;
19633  run;
 
NOTE: There were 17 observations read from the data set EMWS2.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19634  data WORK.ASSESS_META;
19635  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19636  by NAME;
19637  run;
 
NOTE: There were 17 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 17 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 17 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19638  data EM_temp_assessMeta;
19639  set EMWS2.Tree_CMeta_TRAIN;
19640  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19641  run;
 
NOTE: There were 12 observations read from the data set EMWS2.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19642  data EM_temp_assessdata;
19643  set EMWS2.Tree_TRAIN(keep=
19644  F_Churn
19645  I_Churn
19646  P_Churnfalse
19647  P_Churntrue
19648  Q_Churnfalse
19649  Q_Churntrue
19650  R_Churnfalse
19651  R_Churntrue
19652  U_Churn
19653  V_Churnfalse
19654  V_Churntrue
19655  _WARN_
19656  Churn
19657  );
19658  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: There were 3939 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 3939 observations read from the data set EMWS2.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 3939 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23939   data EM_temp_assessMeta;
23940   set EMWS2.Tree_CMeta_TRAIN;
23941   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23942   run;
 
NOTE: There were 12 observations read from the data set EMWS2.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23943   data EM_temp_assessdata;
23944   set EMWS2.Tree_VALIDATE(keep=
23945   F_Churn
23946   I_Churn
23947   P_Churnfalse
23948   P_Churntrue
23949   Q_Churnfalse
23950   Q_Churntrue
23951   R_Churnfalse
23952   R_Churntrue
23953   U_Churn
23954   V_Churnfalse
23955   V_Churntrue
23956   _WARN_
23957   Churn
23958   );
23959   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS2.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 1691 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 1691 observations read from the data set EMWS2.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1691 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28249   %let _cn = %sysfunc(getoption(CENTER));
28250   options nocenter;
28251   proc print data=EMWS2.Tree_EMREPORTFIT noobs label;
28252   var STAT LABEL TRAIN
28253   VALIDATE
28254   ;
28255   by TARGET TARGETLABEL;
28256   title9 ' ';
28257   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28258   run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28259   title10;
28260   options &_cn;
 
28261   proc sort data=EMWS2.Tree_EMCLASSIFICATION nothreads;
28262   by DATAROLE TARGET TARGETLABEL;
28263   run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS2.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28264   %let _cn = %sysfunc(getoption(CENTER));
28265   options nocenter;
28266   proc print data=EMWS2.Tree_EMCLASSIFICATION noobs label;
28267   var from into pct_row pct_col count percent
28268   ;
28269   by DATAROLE TARGET TARGETLABEL;
28270   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28271   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28272   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28273   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28274   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28275   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28276   where _TYPE_='PREDICTION';
28277   title9 ' ';
28278   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28279   run;
 
NOTE: There were 8 observations read from the data set EMWS2.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28280   title9;
28281   title10;
28282   options &_cn;
 
28283   %let _cn = %sysfunc(getoption(CENTER));
28284   options nocenter;
28285   data EMWS2.Tree_EMEVENTREPORT;
28286   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28286 !  8;
28287   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28287 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28287 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28287 ! FALSEEVENT
28288   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28288 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28288 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28289      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28290   FALSEEVENT=0;
28291   FALSENEVENT=0;
28292   TRUEEVENT=0;
28293   TRUENEVENT=0;
28294   set EMWS2.Tree_EMEVENTREPORT;
28295   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_EMEVENTREPORT.
NOTE: The data set EMWS2.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28296   proc print data=EMWS2.Tree_EMEVENTREPORT noobs label;
28297   title9 ' ';
28298   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28299   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28300   run;
 
NOTE: There were 2 observations read from the data set EMWS2.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28301   title10;
28302   options &_cn;
 
28303   proc datasets library=EMWS2 nolist;
28304   modify Tree_EMRANK;
28305   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28306   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28307   run;
 
NOTE: MODIFY was successful for EMWS2.TREE_EMRANK.DATA.
28308   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28309   %let _cn = %sysfunc(getoption(CENTER));
28310   options nocenter;
28311   proc print data=EMWS2.Tree_EMRANK label noobs;
28312   var
28313   decile gain lift liftc resp respc N _meanP_;
28314   by
28315   notsorted DATAROLE
28316   notsorted TARGET
28317   notsorted TARGETLABEL
28318   ;
28319   title9 ' ';
28320   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28321   run;
 
NOTE: There were 40 observations read from the data set EMWS2.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28322   title10;
28323   options &_cn;
 
28324   proc datasets library=EMWS2 nolist;
28325   modify Tree_EMSCOREDIST;
28326   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28327   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28328   run;
 
NOTE: MODIFY was successful for EMWS2.TREE_EMSCOREDIST.DATA.
28329   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
