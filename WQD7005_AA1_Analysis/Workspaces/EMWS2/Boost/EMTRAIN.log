*------------------------------------------------------------*
* Training Log
Date:                January 07, 2024
Time:                02:03:03
*------------------------------------------------------------*
14715  proc freq data=EMWS2.Boost_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.BoostMETA;
14717  run;

NOTE: There were 17 observations read from the data set EMWS2.BOOST_VARIABLESET.
NOTE: The data set WORK.BOOSTMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

14718  proc print data=WORK.BoostMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;

NOTE: There were 4 observations read from the data set WORK.BOOSTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

14724  title10;

14725  %let EMNORLEN = %DMNORLEN;
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN 
EMWS2.Part_TRAIN EMWS2.Part_TRAIN EMWS2 Part_TRAIN 
>>>>>>>>>>>>>> TARGET(   USE='Y' 
                         REPORT='N' 
                         NAME='Churn' 
                         ROLE='TARGET' 
                         LEVEL='NOMINAL' 
                         ORDER='' 
                         CREATOR='' 
                         FORMATTYPE='CATEGORY' 
                         FAMILY='' 
                         LOWERLIMIT=. 
                         UPPERLIMIT=. 
                         DISTRIBUTION='' 
                         COMMENT='' 
                         PRICE=. 
                         TYPE='C' 
                         LABEL='' 
                         FORMAT='$5.' 
                         INFORMAT='$5.' 
                         INDEX='N' 
                         INDEXTYPE='NONE' 
                         LENGTH=5 
                      )[11265] 
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB 
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB 
14810  data WORK.Boost_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14811  length ORDER $20;
14812  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14813     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14814  set EMWS2.BOOST_CHURN_DM( where=(_TYPE_="TARGET"));
14815  NumLevels=2;
14816  select(upcase(ORDER));
14817  when('DESC') ORDER = 'Descending';
14818  when('ASC') ORDER = 'Ascending';
14819  when('FMTDESC') ORDER = 'Formatted Descending';
14820  when('FMTASC') ORDER = 'Formatted Ascending';
14821  otherwise ORDER = 'Descending';
14822  end;
14823  output;
14824  run;

NOTE: There were 1 observations read from the data set EMWS2.BOOST_CHURN_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.BOOST_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14825  title9 ' ';
14826  proc print data=WORK.Boost_EVENT noobs label;
14827  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14828  title9 ' ';
14829  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14830  run;

NOTE: There were 1 observations read from the data set WORK.BOOST_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

14831  title10;

"No decisions defined for target "Churn"." 
14832  proc print data = EMWS2.Boost_Churn_DM noobs label;
14833  var _type_ variable label;
14834  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14835  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14836  title9 ' ';
14837  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14838  run;

NOTE: There were 7 observations read from the data set EMWS2.BOOST_CHURN_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

14839  title10;

14840  %let EMEXCEPTIONSTRING=;
15291  *------------------------------------------------------------*;
15292  * Boost: Generation of macros and macro variables;
15293  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15294  *------------------------------------------------------------*;

15295  %let EMEXCEPTIONSTRING=;
15296  *------------------------------------------------------------*;
15297  * TRAIN: Boost;
15298  *------------------------------------------------------------*;
15299  %let EM_ACTION = TRAIN;
15300  %let syscc = 0;
15301  %macro main;
15302  
15303    filename temp catalog 'sashelp.emmodl.boost_macros.source';
15304    %include temp;
15305    filename temp;
15306  
15307    %setProperties;
15308  
15309    %if %upcase(&EM_ACTION) = CREATE %then %do;
15310      filename temp catalog 'sashelp.emmodl.boost_create.source';
15311      %include temp;
15312      filename temp;
15313  
15314      %create;
15315    %end;
15316  
15317     %else
15318     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15319  
15320         filename temp catalog 'sashelp.emmodl.boost_train.source';
15321         %include temp;
15322         filename temp;
15323         %train;
15324     %end;
15325  
15326    %else
15327    %if %upcase(&EM_ACTION) = SCORE %then %do;
15328      filename temp catalog 'sashelp.emmodl.boost_score.source';
15329      %include temp;
15330      filename temp;
15331  
15332      %score;
15333  
15334    %end;
15335  
15336    %else
15337    %if %upcase(&EM_ACTION) = REPORT %then %do;
15338  
15339         filename temp catalog 'sashelp.emmodl.boost_report.source';
15340         %include temp;
15341         filename temp;
15342  
15343         %report;
15344     %end;
15345  
15346     %doendm:
15347  %mend main;
15348  
15349  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
15350 +
15351 +%macro SetProperties;
15352 +
15353 +     /* boost options */
15354 +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
15355 +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
15356 +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
15357 +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
15358 +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
15359 +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
15360 +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
15361 +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
15362 +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
15363 +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
15364 +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
15365 +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
15366 +
15367 +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
15368 +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
15369 +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
15370 +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
15371 +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
15372 +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
15373 +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
15374 +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
15375 +
15376 +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
15377 +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
15378 +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
15379 +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
15380 +
15381 +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
15382 +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
15383 +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
15384 +
15385 +%mend SetProperties;
15386 +
15387 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
15389 +%macro train;
15391 +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
15392 +   %include temp;
15393 +   filename temp;
15395 +   %if &EM_IMPORT_DATA eq %then %do;
15396 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15397 +       %put &em_codebar;
15398 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15399 +       %put &errormsg;
15400 +       %put &em_codebar;
15401 +       %goto doendm;
15402 +   %end;
15403 +   %else
15404 +       %let EMEXCEPTIONSTRING =;
15406 +   %if  &EM_NUM_TARGET ne 1 %then %do;
15407 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15408 +        %put &em_codebar;
15409 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15410 +        %put &errormsg;
15411 +        %put &em_codebar;
15412 +        %goto doendm;
15413 +   %end;
15415 +   %let target_level = %EM_TARGET_LEVEL;
15416 +   %let target_var = %EM_TARGET;
15418 +   %if ("&target_Level" ne "INTERVAL") %then %do;
15419 +       %em_boost_makeDMDB(indata=&EM_IMPORT_DATA, target=&target_Var,
15420 +                             nLevel=_nTargetLevel);
15421 +   %end;
15423 +   /* check actual num of target levels */
15424 +   %if (&target_Level eq BINARY) %then %do;
15425 +      %if &_nTargetLevel  > 2 %then %do;
15426 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15427 +        %put &em_codebar;
15428 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15429 +        %put &errormsg;
15430 +        %put &em_codebar;
15431 +        %goto doendm;
15432 +      %end;
15433 +   %end;
15435 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15436 +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
15437 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15438 +        %put &em_codebar;
15439 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15440 +        %put &errormsg;
15441 +        %put &em_codebar;
15442 +        %goto doendm;
15443 +   %end;
15445 +   /* Initialize property macro variables */
15446 +   %SetProperties;
15448 +   /* data sets */
15449 +   %EM_GETNAME(key=MODEL, type=DATA);
15450 +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
15451 +   %EM_GETNAME(key=SUBFIT, type=DATA);
15452 +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
15454 +   /* files
15455 +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
15457 +   /* retrieve target information */
15458 +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
15460 +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
15461 +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
15462 +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
15463 +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
15464 +   %do %while(^ %sysfunc(fetch(&dsid)));
15465 +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
15466 +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
15467 +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
15468 +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
15469 +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
15470 +   %end;
15471 +   %let dsid = %sysfunc(close(&dsid));
15473 +   /* if target level is ORDINAL, throw run time exception -- proc boost does not support ordinal target */
15474 +   %if &Target_Level eq ORDINAL %then %do;
15475 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
15476 +        %put &em_codebar;
15477 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_invalidordinaltarget_note, NOQUOTE));
15478 +        %put &errormsg;
15479 +        %put &em_codebar;
15480 +        %goto doendm;
15481 +   %end;
15483 +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be thrown */
15484 +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq . )) %then %do;
15485 +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
15486 +        %put &em_codebar;
15487 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note, NOQUOTE));
15488 +        %put &errormsg;
15489 +        %put &em_codebar;
15490 +        %goto doendm;
15491 +   %end;
15493 +   %runBoostProcedure;
15496 +   %doendm:
15497 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
15498 +%Macro em_boost_makeDMDB(indata=, target=,  nLevel= );
15499 +  %global &nLevel;
15501 +  %let targetLevel=;
15502 +  data _null_;
15503 +     length orderString $64;
15504 +     set &em_data_variableset end=eof;
15505 +     where NAME="&target";
15506 +     select(order);
15507 +            when('')        order ='DESC';
15508 +            when('FMTASC')  order='ASCFMT';
15509 +            when('FMTDESC') order='DESFMT';
15510 +            otherwise;
15511 +     end;
15512 +     if eof then do;
15513 +        call symput("targetOrder", trim(order));
15514 +        call symput("targetLevel", trim(Level));
15515 +     end;
15516 +  run;
15518 +  %if "&targetLevel" ne "INTERVAL" %then %do;
15519 +  proc dmdb batch data=&indata dmdbCat=_BoostDMDB
15520 +    classout=_tmp_dmdbout;
15521 +    class &target(&targetOrder);
15522 +    target &target;
15523 +  run;
15524 +  data _tmp_dmdbout;
15525 +    set _tmp_dmdbout;
15526 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15527 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15528 +  run;
15529 +  data _null_;
15530 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15531 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15532 +    %let dsid = %sysfunc(close(&dsid));
15533 +     call symput("&nLevel", put(&_obs, Best12.));
15534 +  run;
15536 +  proc datasets lib=work nolist;
15537 +     delete _tmp_dmdbout;
15538 +  run;
15539 +  quit;
15540 +  %end;
15542 +%Mend em_boost_makeDMDB;
15544 +%macro runBoostProcedure;
15546 +  proc sql;
15547 +    reset noprint;
15548 +    select count(*) into :nobs from &EM_IMPORT_DATA;
15549 +  quit;
15551 +  %let arborkluge= "work._BoostDMDB";
15552 +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
15554 +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
15555 +      iterations = &EM_PROPERTY_ITERATIONS
15556 +    %end;
15558 +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
15559 +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
15560 +       trainproportion = &tprop
15561 +    %end;
15563 +    %if &EM_PROPERTY_SEED ne %then %do;
15564 +       seed = &EM_PROPERTY_SEED
15565 +    %end;
15567 +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
15568 +       shrinkage = &EM_PROPERTY_SHRINKAGE
15569 +    %end;
15571 +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
15572 +      leaffraction = &EM_PROPERTY_LEAFFRACTION
15573 +    %end;
15575 +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
15576 +    %if &splitsize ge &nobs %then %do;
15577 +       %let splitsize= .;
15578 +    %end;
15579 +    %if &splitsize ne . %then %do;
15580 +      splitsize = &splitsize
15581 +    %end;
15583 +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
15584 +      mincatsize = &EM_PROPERTY_MINCATSIZE
15585 +    %end;
15587 +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
15588 +       maxbranch = &EM_PROPERTY_MAXBRANCH
15589 +    %end;
15591 +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
15592 +       maxdepth = &EM_PROPERTY_MAXDEPTH
15593 +    %end;
15595 +    %let nsurrs = ;
15596 +    %if &EM_PROPERTY_NSURRS ne %then %do;
15597 +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
15598 +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
15599 +      maxsurrs = &nsurrs
15600 +    %end;
15602 +    %if &EM_PROPERTY_MISSING ne %then %do;
15603 +      Missing = &EM_PROPERTY_MISSING
15604 +    %end;
15606 +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
15607 +      reusevar = &EM_PROPERTY_REUSEVAR
15608 +    %end;
15609 +/*
15610 +    %if &EM_PROPERTY_PRECISION ne %then %do;
15611 +      intervaldecimals=&EM_PROPERTY_PRECISION
15612 +    %end;
15613 +*/
15614 +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
15615 +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
15616 +    %end;
15618 +    %if &Target_Event ne %then %do;
15619 +      Event="&Target_Event"
15620 +    %end;
15622 +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
15623 +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
15624 +    %end;
15626 +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
15627 +      IntervalBins = &EM_PROPERTY_INTERVALBINS
15628 +    %end;
15630 +    %if &TARGET_LEVEL eq INTERVAL %then %do;
15631 +      %if &EM_PROPERTY_HUBER ne %then %do;
15632 +        Huber=&EM_PROPERTY_HUBER
15633 +      %end;
15634 +    %end;
15635 +    ;
15637 +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
15638 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15639 +    %end;
15641 +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED ne  %then %do;
15642 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15643 +    %end;
15645 +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
15646 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15647 +    %end;
15649 +    %if %EM_FREQ ne %then %do;
15650 +       freq %EM_FREQ;
15651 +    %end;
15653 +    target %EM_TARGET / level = &TARGET_LEVEL;
15655 +    &EM_DEC_STATEMENT;
15657 +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
15658 +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
15659 +    %end;
15660 +    %if &EM_PROPERTY_NODESIZE ne %then %do;
15661 +       nodesize = &EM_PROPERTY_NODESIZE
15662 +    %end;
15663 +    ;
15664 +    save model=&EM_USER_MODEL;
15665 +  run;
15666 +  quit;
15667 +  %em_checkerror();
15669 +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable orderString is uninitialized.
NOTE: There were 1 observations read from the data set EMWS2.BOOST_VARIABLESET.
      WHERE NAME='Churn';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 3939   Memory used = 511K.
NOTE: There were 3939 observations read from the data set EMWS2.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: 1653839 kilobytes of physical memory.
NOTE: Will use 3939 out of 3939 training cases.
NOTE: Using memory pool with 130523136 bytes.
NOTE: Passed training data 250 times.
NOTE: Current TREEBOOST model contains 50 trees.
NOTE: Training used 900552 bytes of work memory.
NOTE: The data set EMWS2.BOOST_MODEL has 5613 observations and 4 variables.


NOTE: There were 3939 observations read from the data set EMWS2.PART_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.91 seconds
      cpu time            0.89 seconds
      


15672  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15673  *------------------------------------------------------------*;
15674  * End TRAIN: Boost;
15675  *------------------------------------------------------------*;
15676  

15677  *------------------------------------------------------------*;
15678  * Close any missing semi colons;
15679  *------------------------------------------------------------*;
15680  ;
15681  ;
15682  ;
15683  ;
15684  quit;
15685  *------------------------------------------------------------*;
15686  * Close any unbalanced quotes;
15687  *------------------------------------------------------------*;
15688  /*; *"; *'; */
15689  ;
15690  run;
15691  quit;
15692  /* Reset EM Options */
15693  options formchar="|----|+|---+=|-/\<>*";
15694  options nocenter ls=256 ps=10000;
15695  goptions reset=all device=GIF NODISPLAY;

